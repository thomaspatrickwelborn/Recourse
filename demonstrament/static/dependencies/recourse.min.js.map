{"version":3,"file":"recourse.min.js","sources":["../../../development/split-path/index.js","../../../development/type-of/index.js","../../../development/variables/index.js","../../../development/tensors/object/index.js","../../../development/tensors/map/index.js","../../../development/tensors/index.js","../../../development/get-property/index.js","../../../development/typed-object-literal/index.js","../../../development/set-property/index.js","../../../development/delete-property/index.js","../../../development/get-own-property-descriptors/index.js","../../../development/get-own-property-descriptor/index.js","../../../development/entities/index.js","../../../development/expand/index.js","../../../development/impand/index.js","../../../development/compand/index.js","../../../development/decompand/index.js","../../../development/assign-sources/index.js","../../../development/assign/index.js","../../../development/assign-concat/index.js","../../../development/is-array-like/index.js","../../../development/define-property/index.js","../../../development/define-properties/index.js","../../../development/freeze/index.js","../../../development/seal/index.js","../../../development/is-map-like/index.js","../../../development/keys/index.js","../../../development/values/index.js","../../../development/entries/index.js","../../../development/value-of/index.js","../../../development/to-string/index.js","../../../development/index.js"],"sourcesContent":["export default function splitPath($path) {\n  const subpathDelimiters = /([a-zA-Z_][a-zA-Z0-9_]*)|(\\d+)|\\[\"([^\"]*)\"\\]|\"([^\"]*)\"|\\./g\n  const subpaths = []\n  let match\n  while((match = subpathDelimiters.exec($path)) !== null) {\n    if(match[1]) { subpaths.push(match[1]) }\n    else if(match[2]) { subpaths.push(parseInt(match[2], 10)) }\n    else if(match[3]) { subpaths.push(match[3]) }\n    else if(match[4]) { subpaths.push(match[4]) }\n  }\n  return subpaths\n}","export default ($operand) => Object\n  .prototype\n  .toString\n  .call($operand).slice(8, -1).toLowerCase()","const Primitives = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'bigint': BigInt,\n  'undefined': undefined,\n  'null': null,\n}\nconst PrimitiveKeys = Object.keys(Primitives)\nconst PrimitiveValues = Object.values(Primitives)\nconst Objects = {\n  'object': Object,\n  'array': Array,\n  'map': Map,\n}\nconst ObjectKeys = Object.keys(Objects)\nconst ObjectValues = Object.values(Objects)\nconst Types = Object.assign({}, Primitives, Objects)\nconst TypeKeys = Object.keys(Types)\nconst TypeValues = Object.values(Types)\nconst TypeMethods = [\n Primitives.String, Primitives.Number, Primitives.Boolean, \n Objects.Object, Objects.Array\n]\nexport {\n  Primitives, PrimitiveKeys, PrimitiveValues, \n  Objects, ObjectKeys, ObjectValues,\n  Types, TypeKeys, TypeValues, TypeMethods\n}\n","import typeOf from '../../type-of/index.js'\nimport { PrimitiveKeys } from '../../variables/index.js'\nconst Options = { returnValue: 'target' }\n// Object Getter\nfunction Getter(...$arguments) {\n  if(!['object', 'array'].includes(typeOf($arguments[0]))) { return this?.next(...$arguments) }\n  else if(['string', 'number'].includes(typeOf($arguments[1]))) {\n    const [$target, $property, $options] = $arguments\n    const { returnValue } = Object.assign({}, Options, $options)\n    return (returnValue !== 'entries')\n      ? $target[$property]\n      : [$property, $target[$property]]\n  }\n  else {\n    const [$target, $options] = $arguments\n    const { returnValue } = Object.assign({}, Options, $options)\n    return (returnValue !== 'entries')\n      ? $target\n      : Object.entries($target)\n  }\n}\n// Object Setter\nfunction Setter(...$arguments) {\n  if(!['object', 'array'].includes(typeOf($arguments[0]))) { return this?.next(...$arguments) }\n  else if(['string', 'number'].includes(typeOf($arguments[1]))) {\n    const [$target, $property, $value] = $arguments\n    $target[$property] = $value\n    return $target[$property]\n  }\n  else {\n    const [$target, $source] = $arguments\n    iterateTargetEntries: \n    for(const $targetKey of Object.keys($target)) {\n      delete $target[$targetKey]\n    }\n    iterateSourceEntries: \n    for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n      $target[$sourceKey] = $sourceValue\n    }\n    return $target\n  }\n}\n// Object Deleter\nfunction Deleter(...$arguments) {\n  const [$target, $property] = $arguments\n  if(!['object', 'array'].includes(typeOf($target))) { return this?.next(...$arguments) }\n  else if(['string', 'number'].includes(typeOf($property))) {\n    return delete $target[$property]\n  }\n  else {\n    iterateTargetKeys: \n    for(const $targetKey of Object.keys($target)) {\n      delete $target[$targetKey]\n    }\n    return undefined\n  }\n}\n/*\n// Object Descriptor\nfunction Descriptor(...$arguments) {\n  if(!['object', 'array'].includes(typeOf($arguments[0]))) { return this?.next(...$arguments) }\n  else if(['string', 'number'].includes(typeOf($arguments[1]))) {\n    const [$receiver, $property, $options] = $arguments\n    const { returnValue } = Object.assign({}, Options, $options)\n    return (returnValue !== 'entries')\n      ? Object.getOwnPropertyDescriptor($receiver, $property)\n      : [$property, Object.getOwnPropertyDescriptor($receiver, $property)]\n  }\n  else {\n    const [$receiver, $options] = $arguments\n    const { returnValue } = Object.assign({}, Options, $options)\n    return (returnValue !== 'entries')\n      ? Object.getOwnPropertyDescriptors($receiver)\n      : Object.entries(Object.getOwnPropertyDescriptors($receiver))\n  }\n}\n*/\nexport { Getter, Setter, Deleter/*, Descriptor*/ }","import typeOf from '../../type-of/index.js'\nimport { PrimitiveKeys } from '../../variables/index.js'\nconst Options = { returnValue: 'target' }\n// Map Getter\nfunction Getter(...$arguments) {\n  if(typeOf($arguments[0]) !== 'map') { return this?.next(...$arguments) }\n  else if(PrimitiveKeys.includes(typeOf($arguments[1]))) {\n    const [$receiver, $property, $options] = $arguments\n    const { returnValue } = Object.assign({}, Options, $options)\n    if($receiver.has($property)) {\n      if(returnValue === 'target') {\n        return $receiver.get($property)\n      }\n      else if(returnValue === 'entries') {\n        return [$property, $receiver.get($property)]\n      }\n    }\n    else if(returnValue === 'receiver' && Object.hasOwn($receiver, $property)) {\n      return $receiver[$property]\n    }\n  }\n  else {\n    const [$receiver, $options] = $arguments\n    const { returnValue } = Object.assign({}, Options, $options)\n    return (returnValue === 'target') ? Object.fromEntries($receiver)\n    : (returnValue === 'receiver') ? $receiver\n    : (returnValue === 'entries') ? Array.from($receiver.entries())\n    : undefined\n  }\n}\n// Map Setter\nfunction Setter(...$arguments) {\n  if(typeOf($arguments[0]) !== 'map') { return this?.next(...$arguments) }\n  else if(PrimitiveKeys.includes(typeOf($arguments[1]))) {\n    let [$receiver, $property, $value, $options] = $arguments\n    const { returnValue } = Object.assign({}, Options, $options)\n    $receiver.set($property, $value)\n    return $receiver.get($property)\n  }\n  else {\n    let [$receiver, $source, $options] = $arguments\n    const { returnValue } = Object.assign({}, Options, $options)\n    $receiver.clear()\n    iterateSourceEntries: \n    for(const [$sourceKey, $sourceValue] of Object.entries(source)) {\n      $receiver.set($sourceKey, $sourceValue)\n    }\n    return $receiver\n  }\n}\n// Map Deleter\nfunction Deleter(...$arguments) {\n  const length = $arguments.length\n  if(typeOf($arguments[0]) !== 'map') { return this?.next(...$arguments) }\n  else if(PrimitiveKeys.includes(typeOf($arguments[1]))) {\n    let [$receiver, $property, $options] = $arguments\n    const { returnValue } = Object.assign({}, Options, $options)\n    return $receiver.delete($property)\n  }\n  else {\n    let [$receiver] = $arguments\n    return $receiver.clear()\n  } \n}\n/*\n\n// Map Descriptor\nfunction Descriptor(...$arguments) {\n  if(typeOf($arguments[0]) !== 'map') { return this?.next(...$arguments) }\n  else if(PrimitiveKeys.includes(typeOf($arguments[1]))) {\n    const [$receiver, $property, $options] = $arguments\n    const { returnValue } = Object.assign({}, Options, $options)\n    if($receiver.has($property)) {\n      if(returnValue === 'target') {\n        return $receiver.get($property)\n      }\n      else if(returnValue === 'entries') {\n        return [$property, $receiver.get($property)]\n      }\n    }\n    else if(returnValue === 'receiver' && Object.hasOwn($receiver, $property)) {\n      return $receiver[$property]\n    }\n  }\n  else {\n    const [$receiver, $options] = $arguments\n    const { returnValue } = Object.assign({}, Options, $options)\n    return (returnValue === 'target') ? Object.fromEntries($receiver)\n    : (returnValue === 'receiver') ? $receiver\n    : (returnValue === 'entries') ? Array.from($receiver.entries())\n    : undefined\n  }\n}\n*/\nexport { Getter, Setter, Deleter/*, Descriptor*/ }\n","import typeOf from '../type-of/index.js'\nimport * as ObjectTensors from './object/index.js'\nimport * as MapTensors from './map/index.js'\nconst Getters = {\n  Object: ObjectTensors.Getter, \n  Map: MapTensors.Getter, \n}\nconst Setters = {\n  Object: ObjectTensors.Setter, \n  Map: MapTensors.Setter, \n}\nconst Deleters = {\n  Object: ObjectTensors.Deleter, \n  Map: MapTensors.Deleter, \n}\nclass Tensors extends EventTarget {\n  constructor($tensors) {\n    super()\n    const tensors = $tensors.map(($tensor, $tensorIndex) => $tensor.bind({\n      next: $tensors[$tensorIndex + 1]\n    }))\n    Object.defineProperties(this, {\n      'cess': { value: function next() {\n        try { return tensors[0](...arguments) }\n        catch($err) { console.error($err) }\n      } },\n    })\n  }\n}\nexport { Tensors, Getters, Setters, Deleters }","import splitPath from '../split-path/index.js'\nimport { Tensors, Getters } from '../tensors/index.js'\nconst Options = {\n  getters: [Getters.Object, Getters.Map],\n}\nexport default function getProperty() {\n  const [$target, $path, $options] = [...arguments]\n  if($path === undefined) return arguments[0]\n  const options = Object.assign ({}, Options, $options)\n  const getters = new Tensors(options.getters)\n  const subpaths = splitPath($path)\n  let subtarget = $target\n  iterateSubpaths: \n  for(const $subpath of subpaths) {\n    try {\n      subtarget = getters.cess(subtarget, $subpath, options)\n      if(subtarget === undefined) { break iterateSubpaths } \n    }\n    catch($err) { break iterateSubpaths }\n  }\n  return subtarget\n}","import typeOf from '../type-of/index.js'\nexport default function typedObjectLiteral($value) {\n  let _typedObjectLiteral\n  const typeOfValue = typeOf($value)\n  if(typeOfValue === 'string') {\n    const value = $value.toLowerCase()\n    if(value === 'object') { _typedObjectLiteral = new Object() }\n    else if(value === 'array') { _typedObjectLiteral = new Array() }\n    else if(value === 'map') { _typedObjectLiteral = new Map() }\n    else { _typedObjectLiteral = {} }\n  }\n  else  {\n    if(typeOfValue === 'object') { _typedObjectLiteral = new Object() }\n    else if(typeOfValue === 'array') { _typedObjectLiteral = new Array() }\n    else if(value === 'map') { _typedObjectLiteral = new Map() }\n    else { _typedObjectLiteral = {} }\n  }\n  return _typedObjectLiteral\n}","import typedObjectLiteral from '../typed-object-literal/index.js'\nimport typeOf from '../type-of/index.js'\nimport splitPath from '../split-path/index.js'\nimport { Tensors, Getters, Setters } from '../tensors/index.js'\nconst Options = {\n  getters: [Getters.Object, Getters.Map], \n  setters: [Setters.Object, Setters.Map],\n}\nexport default function setProperty() {\n  const $arguments = [...arguments]\n  if(typeOf($arguments[1]) === 'string') {\n    const [$target, $path, $value, $options] = $arguments\n    const options = Object.assign({}, Options, $options)\n    const getters = new Tensors(options.getters)\n    const setters = new Tensors(options.setters)\n    const { enumerable, nonenumerable } = options\n    const target = getters.cess($target, options)\n    const subpaths = splitPath($path)\n    const key = subpaths.pop()\n    let subtarget = $target\n    iterateSubpaths: \n    for(const $subpath of subpaths) {\n      subtarget = getters.cess(subtarget, $subpath, options) || setters.cess(\n        subtarget, $subpath, isNaN($subpath) ? {} : [], options\n      )\n      if(subtarget === undefined) { break iterateSubpaths } \n    }\n    setters.cess(subtarget, key, $value, options)\n    return $target\n  }\n  else {\n    const [$target, $value] = $arguments\n    return $target\n  }\n}","import splitPath from '../split-path/index.js'\nimport { Tensors, Deleters } from '../tensors/index.js'\nconst Options = { deleters: [Deleters.Object, Deleters.Map], returnValue: 'target' }\nimport getProperty from '../get-property/index.js'\nexport default function deleteProperty($target, $path, $options) {\n  const options = Object.assign ({}, Options, $options)\n  const deleters = new Tensors(options.deleters)\n  const subpaths = splitPath($path)\n  const key = subpaths.pop()\n  const subtarget = getProperty($target, subpaths.join('.'), options) || $target\n  deleters.cess(subtarget, key, options)\n}","import typeOf from '../type-of/index.js'\nimport getOwnPropertyDescriptor from '../get-own-property-descriptor/index.js'\nexport default function getOwnPropertyDescriptors($source, $options = {}) {\n  const options = Object.assign({}, $options)\n  const propertyDescriptors = (options.returnValue !== 'entries') ? {} : []\n  const typeOfSource = typeOf($source)\n  const propertyDescriptorKeys = (['array', 'object'].includes(typeOfSource))\n    ? Object.keys(Object.getOwnPropertyDescriptors($source))\n    : (typeOfSource == 'map')\n    ? Array.from($source.keys())\n    : []\n  iteratePropertyDescriptorKeys: \n  for(const $propertyKey of propertyDescriptorKeys) {\n    const propertyDescriptor = getOwnPropertyDescriptor($source, $propertyKey, options)\n    if(propertyDescriptor) {\n      if(options.returnValue !== 'entries') {\n        propertyDescriptors[$propertyKey] = propertyDescriptor\n      }\n      else { propertyDescriptors.push(propertyDescriptor) }\n    }\n  }\n  return propertyDescriptors\n}","import typeOf from '../type-of/index.js'\nimport getOwnPropertyDescriptors from '../get-own-property-descriptors/index.js'\nimport { Tensors, Getters } from '../tensors/index.js'\nimport { ObjectKeys } from '../variables/index.js'\nconst Options = {\n  getters: [Getters.Object, Getters.Map],\n  delimiter: '.',\n  depth: 0,\n  frozen: false,\n  maxDepth: 10,\n  nonenumerable: true,\n  path: false,\n  sealed: false,\n  type: false,\n}\nexport default function getOwnPropertyDescriptor($source, $propertyKey, $options = {}) {\n  const options = Object.assign({}, Options, $options, {\n    ancestors: Object.assign([], $options.ancestors),\n  })\n  if(options.depth >= options.maxDepth) { return }\n  else { options.depth++ }\n  const propertyValue = new Tensors(options.getters).cess($source, $propertyKey, options)\n  if(propertyValue !== undefined) {\n    const typeOfSource = typeOf($source)\n    const propertyDescriptor = (typeOfSource !== 'map')\n      ? Object.getOwnPropertyDescriptor($source, $propertyKey)\n      : { configurable: false, enumerable: true, value: propertyValue[1], writable: true }\n    if(!options.nonenumerable && !propertyDescriptor.enumerable) { return }\n    if(!options.ancestors.includes($source)) { options.ancestors.unshift($source) }\n    if(options.ancestors.includes(propertyValue)) { return }\n    if(options.path) {\n      options.path = (\n        typeOf(options.path) === 'string'\n      ) ? [options.path, $propertyKey].join(options.delimiter) : $propertyKey\n      propertyDescriptor.path = options.path\n    }\n    if(options.type) { propertyDescriptor.type = typeOf(propertyValue) }\n    if(options.frozen) { propertyDescriptor.frozen = Object.isFrozen(propertyValue) }\n    if(options.sealed) { propertyDescriptor.sealed = Object.isSealed(propertyValue) }\n    if(typeOfSource !== 'map' && ObjectKeys.includes(typeOf(propertyValue))) {\n      propertyDescriptor.value = getOwnPropertyDescriptors(propertyValue, options)\n    }\n    else if(typeOfSource === 'map') {\n      if(ObjectKeys.includes(typeOf(propertyValue[1]))) {\n        propertyDescriptor.value = getOwnPropertyDescriptors(propertyValue[1], options)\n      }\n      // else {\n      //   propertyDescriptor.value = propertyValue\n      // }\n    }\n    return (options.returnValue !== 'entries')\n      ? propertyDescriptor\n      : [$propertyKey, propertyDescriptor]\n  }\n}","import { Tensors, Getters } from '../tensors/index.js'\nimport typeOf from '../type-of/index.js'\nimport { ObjectKeys } from '../variables/index.js'\nimport getOwnPropertyDescriptor from '../get-own-property-descriptor/index.js'\nconst Options = {\n  getters: [Getters.Object, Getters.Map],\n  ancestors: [],\n  depth: 0, maxDepth: 10,\n  enumerable: true, nonenumerable: false,\n  recurse: true,\n  returnValue: 'target',\n}\nexport default function entities($source, $type, $options = {}) {\n  const typeOfSource = typeOf($source)\n  const sourceEntities = []\n  const options = Object.assign({}, Options, $options, {\n    ancestors: Object.assign([], $options.ancestors)\n  })\n  const { ancestors, maxDepth, enumerable, nonenumerable, recurse } = options\n  if(options.depth >= maxDepth) { return }\n  if(!ancestors.includes($source)) { ancestors.unshift($source) }\n  options.depth++\n  const propertyDescriptorKeys = (['array', 'object'].includes(typeOf($source)))\n    ? Object.keys(Object.getOwnPropertyDescriptors($source))\n    : Array.from($source.keys())\n  iterateSourcePropertyDescriptors: \n  for(const $propertyKey of propertyDescriptorKeys) {\n    // const propertyValue = new Tensors(options.getters).cess($source, $propertyKey, options)\n    const propertyDescriptor = (typeOf($source) !== 'map')\n      ? Object.getOwnPropertyDescriptor($source, $propertyKey)\n      : {\n        configurable: false,\n        enumerable: true,\n        value: new Tensors(options.getters).cess($source, $propertyKey, options),\n        writable: true,\n      }\n    if(!propertyDescriptor) { continue iterateSourcePropertyDescriptors }\n    if(\n      enumerable && propertyDescriptor.enumerable ||\n      nonenumerable && !propertyDescriptor.enumerable\n    ) {\n      const $value = propertyDescriptor.value\n      const typeOfValue = typeOf($value)\n      if(\n        recurse && \n        ObjectKeys.includes(typeOfValue) && \n        !ancestors.includes($value)\n      ) {\n        ancestors.unshift($value)\n        const subentities = entities($value, $type, options)\n        if(subentities.length) {\n          if($type === 'entries') { sourceEntities.push([$propertyKey, subentities]) }\n          else if($type === 'values') { sourceEntities.push(subentities) }\n          else if($type === 'keys') { sourceEntities.push($propertyKey, subentities) }\n        }\n        else {\n          if($type === 'entries') { sourceEntities.push([$propertyKey, $value]) }\n          else if($type === 'values') { sourceEntities.push($value) }\n          else if($type === 'keys') { sourceEntities.push($propertyKey) }\n        }\n      }\n      else {\n        if($type === 'entries') { sourceEntities.push([$propertyKey, $value]) }\n        else if($type === 'values') { sourceEntities.push($value) }\n        else if($type === 'keys') { sourceEntities.push($propertyKey) }\n      }\n    }\n  }\n  return sourceEntities\n}","import { ObjectKeys } from '../variables/index.js'\nimport setProperty from '../set-property/index.js'\nimport typeOf from '../type-of/index.js'\nimport typedObjectLiteral from '../typed-object-literal/index.js'\nimport entities from '../entities/index.js'\nconst ValidPathTypes = ['string', 'function']\nexport default function expand($source, $path, $options = {}) {\n  const options = Object.assign({}, $options)\n  const typeOfPath = typeOf($path)\n  const typeOfSource = typeOf($source)\n  if(\n    !ValidPathTypes.includes(typeOfPath) ||\n    !ObjectKeys.includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral($source)\n  for(const [$sourceKey, $sourceValue] of entities(\n    $source, 'entries', Object.assign({}, options, { recurse: false })\n  )) {\n    const targetValue = (\n      ObjectKeys.includes(typeOf($sourceValue))\n    ) ? expand($sourceValue, $path, options) : $sourceValue\n    if(typeOfPath === ValidPathTypes[0]) {\n      target[$sourceKey] = setProperty({}, $path, targetValue, options)\n    }\n    else if(typeOfPath === ValidPathTypes[1]) {\n      target[$sourceKey] = $path(targetValue)\n    }\n  }\n  return target\n}","import { Tensors, Getters } from '../tensors/index.js'\nimport getProperty from '../get-property/index.js'\nimport typeOf from '../type-of/index.js'\nimport typedObjectLiteral from '../typed-object-literal/index.js'\nimport entities from '../entities/index.js'\nconst Options = {\n  ancestors: [], \n  getters: [Getters.Object, Getters.Map],\n  depth: 0, maxDepth: 10,\n}\nexport default function impand($source, $property, $options = {}) {\n  const options = Object.assign({}, Options, $options, {\n    ancestors: Object.assign([], $options.ancestors)\n  })\n  const { ancestors, values } = options\n  if(options.depth > options.maxDepth) { return } else { options.depth++ }\n  const source = new Tensors(options.getters).cess($source, options)\n  if(!ancestors.includes(source)) { ancestors.unshift(source) }\n  const typeOfProperty = typeOf($property)\n  let target = typedObjectLiteral($source)\n  iterateSourceEntries: \n  for(const [$sourceKey, $sourceValue] of entities(\n    $source, 'entries', Object.assign({}, options, { recurse: false })\n  )) {\n    if(typeOfProperty === 'string') { target[$sourceKey] = getProperty($sourceValue, $property) }\n    else if(typeOfProperty === 'function') { target[$sourceKey] = $property($sourceValue) }\n    if(target[$sourceKey] && typeof target[$sourceKey] === 'object') {\n      target[$sourceKey] = impand(target[$sourceKey], $property)\n    }\n  }\n  return target\n}","import { Tensors, Getters } from '../tensors/index.js'\nimport { ObjectKeys } from '../variables/index.js'\nimport entities from '../entities/index.js'\nconst Options = {\n  depth: 0, \n  getters: [Getters.Object, Getters.Map],\n  maxDepth: 10,\n  values: false,\n}\nexport default function compand($source, $options) {\n  const target = []\n  const options = Object.assign({}, Options, $options, {\n    ancestors: Object.assign([], $options.ancestors)\n  })\n  const { ancestors, values } = options\n  options.depth++\n  if(options.depth > options.maxDepth) { return target }\n  const source = new Tensors(options.getters).cess($source, options)\nif(!ancestors.includes($source)) { ancestors.unshift($source) }\n  const objectProperties = entities($source, 'entries', Object.assign(options, {\n    recurse: false// , returnValue: 'receiver'\n  }))\n  iterateObjectProperties: \n  for(const [$key, $value] of objectProperties) {\n    if(!values) { target.push($key) }\n    else if(values) { target.push([$key, $value]) }\n    if(\n      typeof $value === 'object' &&\n      $value !== null &&\n      !Object.is($value, source) && \n      !ancestors.includes($value)\n    ) {\n      const subsources = compand($value, options)\n      if(!values) {\n        for(const $subsource of subsources) {\n          const path = [$key, $subsource].join('.')\n          target.push(path)\n        }\n      }\n      else if(values) {\n        for(const [$subsourceKey, $subsource] of subsources) {\n          const path = [$key, $subsourceKey].join('.')\n          target.push([path, $subsource])\n        }\n      }\n    }\n  }\n  return target\n}","import { Tensors, Setters } from '../tensors/index.js'\nimport typeOf from '../type-of/index.js'\nimport setProperty from '../set-property/index.js'\nimport entities from '../entities/index.js'\nconst Options = {\n  setters: [Setters.Object, Setters.Map],\n}\nexport default function decompand($source, $options) {\n  const options = Object.assign({}, Options, $options)\n  const typeofSource= typeOf($source)\n  const sourceEntries = (\n    typeofSource === 'object'\n  ) ? entities($source, 'entries', options) : $source\n  if(!sourceEntries) { return }\n  const target = (isNaN(sourceEntries[0][0])) ? {} : []\n  iterateSourceEntries: \n  for(const [$propertyPath, $propertyValue] of sourceEntries) {\n    setProperty(target, $propertyPath, $propertyValue, options)\n  }\n  return target\n}","import typeOf from '../type-of/index.js'\nimport { ObjectKeys } from '../variables/index.js'\nimport { Tensors, Getters, Setters } from '../tensors/index.js'\nimport * as Variables from '../variables/index.js'\nimport entities from '../entities/index.js'\nconst Options = {\n  getters: [Getters.Object, Getters.Map],\n  setters: [Setters.Object, Setters.Map],\n}\nexport default function assignSources($target, $type, ...$sources) {\n  if(!$target) { return $target}\n  const options = Object.assign({}, Options)\n  const getters = new Tensors(options.getters)\n  const setters = new Tensors(options.setters)\n  const typeOfTarget = typeOf($target)\n  iterateSources: \n  for(const $source of $sources) {\n    if(!Variables.ObjectKeys.includes(typeOf($source))) continue iterateSources\n    const sourceEntries = entities($source, 'entries', {\n      recurse: false, // returnValue: 'entries'\n    })\n    iterateSourceEntries: \n    for(const [$sourcePropertyKey, $sourcePropertyValue] of sourceEntries) {\n      const targetPropertyValue = getters.cess($target, $sourcePropertyKey)\n      const typeOfTargetPropertyValue = typeOf(targetPropertyValue)\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue)\n      if(typeOfTarget === 'array' && $type === 'assignConcat') {\n        setters.cess($target, $target.length, $sourcePropertyValue)\n      }\n      else if(\n        Variables.ObjectKeys.includes(typeOfSourcePropertyValue) &&\n        Variables.ObjectKeys.includes(typeOfTargetPropertyValue)\n      ) {\n        assignSources(targetPropertyValue, $type, $sourcePropertyValue)\n      }\n      else {\n        setters.cess($target, $sourcePropertyKey, $sourcePropertyValue)\n      }\n    }\n  }\n}","import assignSources from '../assign-sources/index.js'\nexport default ($target, ...$sources) => assignSources($target, 'assign', ...$sources)","import assignSources from '../assign-sources/index.js'\nexport default ($target, ...$sources) => assignSources($target, 'assignConcat', ...$sources)","import entities from '../entities/index.js'\nimport typeOf from '../type-of/index.js'\nconst Options = { strict: true }\nexport default function isArrayLike($source, $options) {\n  const options = Object.assign({}, Options, $options)\n  let isArrayLike\n  const typeOfSource = typeOf($source)\n  if(typeOfSource === 'array') { isArrayLike = true }\n  else if(\n    typeOfSource === 'object' &&\n    $source.length >= 0 && \n    Number.isInteger($source.length)\n  ) {\n    if(options.strict === false) {\n      isArrayLike = true\n    }\n    else {\n      iterateSourceKeys: \n      for(const $sourceKey of entities($source, 'keys', {\n        nonenumerable: true,  recurse: false\n      }).reverse()) {\n        const lastIndex = Number($sourceKey)\n        if(lastIndex === $source.length - 1) {\n          isArrayLike = true\n          break iterateSourceKeys\n        }\n      }\n      if(isArrayLike === undefined) { isArrayLike = false }\n    }\n  }\n  else { isArrayLike = false }\n  return isArrayLike\n}","import isArrayLike from '../is-array-like/index.js'\nimport typeOf from '../type-of/index.js'\nimport typedObjectLiteral from '../typed-object-literal/index.js'\nimport defineProperties from '../define-properties/index.js'\nimport * as Variables from '../variables/index.js'\nconst Options = { typeCoercion: false }\nexport default function defineProperty($target, $propertyKey, $propertyDescriptor, $options) {\n  const propertyDescriptor = Object.assign({}, $propertyDescriptor)\n  let propertyDescriptorValue = propertyDescriptor.value\n  const options = Object.assign({}, Options, $options)\n  const typeOfPropertyDescriptorValue = typeOf(propertyDescriptor.value)\n  const targetPropertyValue = $target[$propertyKey]\n  const typeOfTargetPropertyValue = typeOf(targetPropertyValue)\n  if(Variables.ObjectKeys.includes(typeOfPropertyDescriptorValue)) {\n    if(Variables.ObjectKeys.includes(typeOfTargetPropertyValue)) {\n      propertyDescriptor.value = defineProperties(targetPropertyValue, propertyDescriptorValue, options)\n    }\n    else {\n      const propertyValueTarget = typedObjectLiteral(isArrayLike(\n        Object.defineProperties({}, propertyDescriptorValue)\n      ) ? 'array' : 'object')\n      propertyDescriptor.value = defineProperties(propertyValueTarget, propertyDescriptorValue, options)\n    }\n  }\n  else if(\n    options.typeCoercion && \n    Object.getOwnPropertyDescriptor(propertyDescriptor, 'type') !== undefined &&\n    !['undefined'/*, 'null'*/].includes(typeOfPropertyDescriptorValue)\n  ) {\n    propertyDescriptor.value = Variables.Primitives[propertyDescriptor.type](propertyDescriptorValue)\n  }\n  Object.defineProperty($target, $propertyKey, propertyDescriptor)\n  if($propertyDescriptor.sealed) { Object.seal($target[$propertyKey]) }\n  if($propertyDescriptor.frozen) { Object.freeze($target[$propertyKey]) }\n  return $target\n}","import defineProperty from '../define-property/index.js'\nexport default function defineProperties($target, $propertyDescriptors, $options) {\n  for(const [$propertyKey, $propertyDescriptor] of Object.entries($propertyDescriptors)) {\n    defineProperty($target, $propertyKey, $propertyDescriptor, $options)\n  }\n  return $target\n}","import typeOf from '../type-of/index.js'\nimport entities from '../entities/index.js'\nimport { Tensors, Getters } from '../tensors/index.js'\nimport { ObjectKeys } from '../variables/index.js'\nconst Options = {\n  getters: [Getters.Object, Getters.Map],\n  ancestors: [], \n  depth: 0, maxDepth: 10,\n}\nexport default function freeze($target, $options = {}) {\n  const options = Object.assign({}, Options, $options, {\n    ancestors: Object.assign([], $options.ancestors)\n  })\n  const { ancestors, values } = options\n  if(options.depth > options.maxDepth) { return } else { options.depth++ }\n  const target = new Tensors(options.getters).cess($target, options)\n  if(!ancestors.includes(target)) { ancestors.unshift(target) }\n  const targetEntities = entities($target, 'entries', Object.assign(options, {\n    recurse: false\n  }))\n  iterateTargetEntities: \n  for(const [$propertyKey, $propertyValue] of targetEntities) {\n    if(ancestors.includes($propertyValue)) { continue iterateTargetEntities }\n    else if(ObjectKeys.includes(typeOf($propertyValue))) {\n      freeze($propertyValue, options)\n    }\n  }\n  return Object.freeze($target)\n}","import typeOf from '../type-of/index.js'\nimport entities from '../entities/index.js'\nimport { Tensors, Getters } from '../tensors/index.js'\nimport { ObjectKeys } from '../variables/index.js'\nconst Options = {\n  getters: [Getters.Object, Getters.Map],\n  ancestors: [], \n  depth: 0, maxDepth: 10,\n}\nexport default function seal($target, $options = {}) {\n  const options = Object.assign({}, Options, $options, {\n    ancestors: Object.assign([], $options.ancestors)\n  })\n  const { ancestors, values } = options\n  if(options.depth > options.maxDepth) { return } else { options.depth++ }\n  const target = new Tensors(options.getters).cess($target, options)\n  if(!ancestors.includes(target)) { ancestors.unshift(target) }\n  const targetEntities = entities($target, 'entries', Object.assign(options, {\n    recurse: false\n  }))\n  iterateTargetEntities: \n  for(const [$propertyKey, $propertyValue] of targetEntities) {\n    if(ancestors.includes($propertyValue)) { continue iterateTargetEntities }\n    else if(ObjectKeys.includes(typeOf($propertyValue))) {\n      seal($propertyValue, options)\n    }\n  }\n  return Object.seal($target)\n}","import entities from '../entities/index.js'\nimport isArrayLike from '../is-array-like/index.js'\nimport typeOf from '../type-of/index.js'\nconst Options = { strict: true }\nexport default function isMapLike($source, $options) {\n  const options = Object.assign({}, Options, $options)\n  let isMapLike\n  const typeOfSource = typeOf($source)\n  if(typeOfSource === 'map') { isMapLike = true }\n  else if(\n    typeOfSource === 'object' &&\n    $source.size >= 0 && \n    Number.isInteger($source.size)\n  ) {\n    if(options.strict === false) {\n      isMapLike = true\n    }\n    else {\n      iterateSourceEntries: \n      for(const $sourceEntity of entities($source, 'entries', {\n        nonenumerable: true, recurse: false\n      })) {\n        if(\n          isArrayLike($sourceEntity, options) ||\n          $sourceEntity.length === 2\n        ) { isMapLike = true }\n        else {\n          isMapLike = false\n          break iterateSourceEntries\n        }\n      }\n      if(isMapLike === undefined) { isMapLike = false }\n    }\n  }\n  else { isMapLike = false }\n  return isMapLike\n}","import entities from '../entities/index.js'\nexport default ($target, $options) => entities($target, 'keys', $options)","import entities from '../entities/index.js'\nexport default ($target, $options) => entities($target, 'values', $options)","import entities from '../entities/index.js'\nexport default ($target, $options) => entities($target, 'entries', $options)","import entities from '../entities/index.js' \nimport typeOf from '../type-of/index.js'\nimport typedObjectLiteral from '../typed-object-literal/index.js'\nimport { Tensors, Getters } from '../tensors/index.js'\nimport { ObjectKeys } from '../variables/index.js'\nconst Options = {\n  ancestors: [], \n  depth: 0, maxDepth: 10,\n  getters: [Getters.Object, Getters.Map], \n  returnValue: 'receiver',\n}\nexport default function valueOf($source, $options = {}) {\n  const options = Object.assign({}, Options, $options, {\n    ancestors: Object.assign([], $options.ancestors)\n  })\n  const { ancestors, maxDepth, returnValue } = options\n  if(!ancestors.includes($source)) { ancestors.unshift($source) }\n  if(options.depth >= maxDepth) { return } else { options.depth++ }\n  const source = new Tensors(options.getters).cess($source, options)\n  if(source === undefined) { return }\n  const target = typedObjectLiteral(typeOf(source))\n  const sourceEntries = entities($source, 'entries', Object.assign({}, options, {\n    recurse: false\n  }))\n  iterateSourceEntries: \n  for(const [$sourceKey, $sourceValue] of sourceEntries) {\n    let sourceValue\n    if(ObjectKeys.includes(typeOf($sourceValue))) {\n      if(!ancestors.includes($sourceValue)) { ancestors.unshift($sourceValue) }\n      else { continue iterateSourceEntries }\n      sourceValue = valueOf($sourceValue, options)\n    }\n    else { sourceValue = $sourceValue }\n    try {\n      target[$sourceKey] = sourceValue\n    }\n    catch($err) { console.error($err) }\n  }\n  return target\n}","import valueOf from '../value-of/index.js'\nimport { Getters } from '../tensors/index.js'\nimport { ObjectKeys } from '../variables/index.js'\nconst Options = { space: 0, replacer: null, returnValue: 'receiver' }\nexport default function toString($source, $options) {\n  const options = Object.assign({}, Options, $options)\n  return JSON.stringify(\n    valueOf($source, options), options.replacer, options.space\n  )\n}","import getProperty from './get-property/index.js'\nimport setProperty from './set-property/index.js'\nimport deleteProperty from './delete-property/index.js'\nimport * as tensors from './tensors/index.js'\nimport expand from './expand/index.js'\nimport impand from './impand/index.js'\nimport compand from './compand/index.js'\nimport decompand from './decompand/index.js'\nimport assign from './assign/index.js'\nimport assignConcat from './assign-concat/index.js'\nimport defineProperties from './define-properties/index.js'\nimport defineProperty from './define-property/index.js'\nimport freeze from './freeze/index.js'\nimport seal from './seal/index.js'\nimport typedObjectLiteral from './typed-object-literal/index.js'\nimport typeOf from './type-of/index.js'\nimport isArrayLike from './is-array-like/index.js'\nimport isMapLike from './is-map-like/index.js'\nimport * as variables from './variables/index.js'\nimport keys from './keys/index.js'\nimport values from './values/index.js'\nimport entries from './entries/index.js'\nimport entities from './entities/index.js'\nimport getOwnPropertyDescriptors from './get-own-property-descriptors/index.js'\nimport getOwnPropertyDescriptor from './get-own-property-descriptor/index.js'\nimport splitPath from './split-path/index.js'\nimport toString from './to-string/index.js'\nimport valueOf from './value-of/index.js'\n\nclass Recourse extends EventTarget {\n  static compand = compand\n  static decompand = decompand\n  static expand = expand\n  static impand = impand\n  static keys = keys\n  static values = values\n  static entries = entries\n  static entities = entities\n  static get = getProperty\n  static set = setProperty\n  static delete = deleteProperty\n  static assign = assign\n  static assignConcat = assignConcat\n  static defineProperties = defineProperties\n  static defineProperty = defineProperty\n  static freeze = freeze\n  static seal = seal\n  static getOwnPropertyDescriptors = getOwnPropertyDescriptors\n  static getOwnPropertyDescriptor = getOwnPropertyDescriptor\n  static isArrayLike = isArrayLike\n  static isMapLike = isMapLike\n  static typeOf = typeOf\n  static toString = toString\n  static valueOf = valueOf\n\n  constructor($target) {\n    super()\n    iterateStaticMutatorMethods: \n    for(const [$staticMethodName, $staticMethod] of Object.entries({\n      compand: Recourse.compand, decompand: Recourse.decompand, \n      expand: Recourse.expand, impand: Recourse.impand,\n      entities: Recourse.entities,\n      keys: Recourse.keys, values: Recourse.values, entries: Recourse.entries, \n      get: Recourse.get, set: Recourse.set, delete: Recourse.delete,\n      assign: Recourse.assign, assignConcat: Recourse.assignConcat, \n      defineProperties: Recourse.defineProperties, defineProperty: Recourse.defineProperty,\n      freeze: Recourse.freeze, seal: Recourse.seal,\n      getOwnPropertyDescriptors: Recourse.getOwnPropertyDescriptors, getOwnPropertyDescriptor: Recourse.getOwnPropertyDescriptor,\n      isArrayLike: Recourse.isArrayLike, isMapLike: Recourse.isMapLike,\n      typeOf: Recourse.typeOf,\n    })) {\n      Object.defineProperty(this, $staticMethodName, {\n        value: $staticMethod.bind(this, $target)\n      })\n    }\n  }\n}\nexport {\n  Recourse, tensors, \n  getProperty as get, setProperty as set, deleteProperty as delete,\n  expand, impand, compand, decompand,\n  assign, assignConcat,\n  defineProperties, defineProperty,\n  freeze, seal,\n  keys, values, entries,\n  entities, \n  getOwnPropertyDescriptors, getOwnPropertyDescriptor,\n  isArrayLike, typeOf,\n  splitPath, \n  typedObjectLiteral, variables,\n  valueOf, toString,\n}"],"names":["splitPath","$path","subpathDelimiters","subpaths","match","exec","push","parseInt","typeOf","$operand","Object","prototype","toString","call","slice","toLowerCase","Primitives","string","String","number","Number","boolean","Boolean","bigint","BigInt","undefined","null","PrimitiveKeys","keys","PrimitiveValues","values","Objects","object","array","Array","map","Map","ObjectKeys","ObjectValues","Types","assign","TypeKeys","TypeValues","TypeMethods","Options","returnValue","Getters","$arguments","includes","$target","$property","$options","entries","this","next","$receiver","fromEntries","from","has","get","hasOwn","Setters","$value","$source","$targetKey","$sourceKey","$sourceValue","set","clear","source","Deleters","length","delete","Tensors","EventTarget","constructor","$tensors","super","tensors","$tensor","$tensorIndex","bind","defineProperties","cess","value","arguments","$err","console","error","getters","getProperty","options","subtarget","iterateSubpaths","$subpath","typedObjectLiteral","_typedObjectLiteral","typeOfValue","setters","setProperty","enumerable","nonenumerable","key","pop","isNaN","deleters","deleteProperty","join","getOwnPropertyDescriptors","propertyDescriptors","typeOfSource","propertyDescriptorKeys","$propertyKey","propertyDescriptor","getOwnPropertyDescriptor","delimiter","depth","frozen","maxDepth","path","sealed","type","ancestors","propertyValue","configurable","writable","unshift","isFrozen","isSealed","recurse","entities","$type","sourceEntities","subentities","ValidPathTypes","expand","typeOfPath","target","targetValue","impand","typeOfProperty","compand","objectProperties","$key","is","subsources","$subsourceKey","$subsource","decompand","sourceEntries","$propertyPath","$propertyValue","assignSources","$sources","typeOfTarget","iterateSources","Variables.ObjectKeys","$sourcePropertyKey","$sourcePropertyValue","targetPropertyValue","typeOfTargetPropertyValue","typeOfSourcePropertyValue","assignConcat","strict","isArrayLike","isInteger","iterateSourceKeys","reverse","typeCoercion","defineProperty","$propertyDescriptor","propertyDescriptorValue","typeOfPropertyDescriptorValue","propertyValueTarget","Variables.Primitives","seal","freeze","$propertyDescriptors","targetEntities","isMapLike","size","iterateSourceEntries","$sourceEntity","valueOf","sourceValue","space","replacer","JSON","stringify","Recourse","static","$staticMethodName","$staticMethod"],"mappings":"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"}