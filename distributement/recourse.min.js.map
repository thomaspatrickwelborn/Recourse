{"version":3,"file":"recourse.min.js","sources":["../development/regular-expressions/index.js","../development/type-of/index.js","../development/cessors/index.js","../development/cessors/object/index.js","../development/cessors/map/index.js","../development/get-property/index.js","../development/typed-object-literal/index.js","../development/set-property/index.js","../development/delete-property/index.js","../development/variables/index.js","../development/entities/index.js","../development/expand/index.js","../development/entries/index.js","../development/impand/index.js","../development/compand/index.js","../development/decompand/index.js","../development/assign-sources/index.js","../development/assign/index.js","../development/assign-concat/index.js","../development/is-array-like/index.js","../development/define-property/index.js","../development/define-properties/index.js","../development/freeze/index.js","../development/seal/index.js","../development/is-entries/index.js","../development/keys/index.js","../development/values/index.js","../development/get-own-property-descriptor/index.js","../development/get-own-property-descriptors/index.js","../development/split-path/index.js","../development/value-of/index.js","../development/to-string/index.js","../development/index.js"],"sourcesContent":["export default {\n  quotationEscape: /\\.(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,\n  quotationStartStop: /^\"(.*)\"$/,\n}","export default ($operand) => Object\n  .prototype\n  .toString\n  .call($operand).slice(8, -1).toLowerCase()","import typeOf from '../type-of/index.js'\nimport * as ObjectCessors from './object/index.js'\nimport * as MapCessors from './map/index.js'\nclass Cessors extends EventTarget {\n  constructor($cessors) {\n    super()\n    const cessors = Object.assign([], $cessors)\n    Object.defineProperties(this, {\n      'cess': { value: function cess() {\n        let cess\n        iterateGetters: \n        for(const $cessor of cessors) {\n          cess = $cessor(...arguments)\n          if(cess !== undefined) { break iterateGetters }\n        }\n        return cess\n      } },\n    })\n  }\n}\nconst Getters = {\n  Object: ObjectCessors.Getter, \n  Map: MapCessors.Getter, \n}\nconst Setters = {\n  Object: ObjectCessors.Setter, \n  Map: MapCessors.Setter, \n}\nconst Deleters = {\n  Object: ObjectCessors.Deleter, \n  Map: MapCessors.Deleter, \n}\nexport { Cessors, Getters, Setters, Deleters }","import typeOf from '../../type-of/index.js'\n// Object Getter\nfunction Getter() {\n  const $target = arguments[0]\n  if(!['object', 'array'].includes(typeOf($target))) { return }\n  if(typeOf(arguments[1]) === 'string') {\n    const $property = arguments[1]\n    return $target[$property]\n  }\n  else {\n    return $target\n  }\n}\n// Object Setter\nfunction Setter() {\n  const $arguments = [...arguments]\n  if(!['object', 'array'].includes(typeOf($arguments[0]))) { return }\n  else if(typeOf($arguments[1]) === 'string') {\n    const [$target, $property, $value, $options] = $arguments\n    $target[$property] = $value\n    return $target[$property]\n  }\n  else {\n    const [$target, $source, $options] = $arguments\n    iterateTargetEntries: \n    for(const $targetKey of Object.keys($target)) {\n      delete $target[$targetKey]\n    }\n    iterateSourceEntries: \n    for(const [$sourceKey, $sourceValue] of Object.entries(source)) {\n      $target[$sourceKey] = $sourceValue\n    }\n    return $target\n  }\n}\n// Object Deleter\nfunction Deleter($target, $property, $options) {\n  const $arguments = [...arguments]\n  if(!['object', 'array'].includes(typeOf($arguments[0]))) { return }\n  else if(typeOf($arguments[1]) === 'string') {\n    return delete $target[$property]\n  }\n  else {\n    iterateTargetKeys: \n    for(const $targetKey of Object.keys($target)) {\n      delete $target[$targetKey]\n    }\n    return undefined\n  } \n}\nexport { Getter, Setter, Deleter }","import typeOf from '../../type-of/index.js'\n// Map Getter\nfunction Getter() {\n  const $target = arguments[0]\n  if(typeOf($target) !== 'map') { return }\n  else if(typeOf(arguments[1]) === 'string') {\n    const $property = arguments[1]\n    return $target.get($property)\n  }\n  else {\n    return Object.fromEntries($target)\n  }\n}\n// Map Setter\nfunction Setter() {\n  const $arguments = [...arguments]\n  if(typeOf($arguments[0]) !== 'map') { return }\n  else if(typeOf($arguments[1]) === 'string') {\n    const [$target, $property, $value, $options] = $arguments\n    $target.set($property, $value)\n    return $target.get($property)\n  }\n  else {\n    const [$target, $source, $options] = $arguments\n    $target.clear()\n    iterateSourceEntries: \n    for(const [$sourceKey, $sourceValue] of Object.entries(source)) {\n      $target.set($sourceKey, $sourceValue)\n    }\n    return $target\n  }\n}\n// Map Deleter\nfunction Deleter() {\n  const $arguments = [...arguments]\n  if(typeOf($arguments[0]) !== 'map') { return }\n  else if(typeOf($arguments[1]) === 'string') {\n    const [$target, $property, $options] = $arguments\n    return $target.delete($property)\n  }\n  else {\n    const [$target, $options] = $arguments\n    return $target.clear()\n  } \n}\nexport { Getter, Setter, Deleter }","import regularExpressions from '../regular-expressions/index.js'\nimport { Cessors, Getters } from '../cessors/index.js'\nconst Options = { getters: [Getters.Object, Getters.Map] }\nexport default function getProperty() {\n  const [$target, $path, $options] = [...arguments]\n  const options = Object.assign ({}, Options, $options)\n  if($path === undefined) return arguments[0]\n  const getters = new Cessors(options.getters)\n  const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape))\n  let subtarget = $target\n  iterateSubpaths: \n  for(const $subpath of subpaths) {\n    try {\n      subtarget = getters.cess(subtarget, $subpath)\n      if(subtarget === undefined) { break iterateSubpaths } \n    }\n    catch($err) { break iterateSubpaths }\n  }\n  return subtarget\n}","import typeOf from '../type-of/index.js'\nexport default function typedObjectLiteral($value) {\n  let _typedObjectLiteral\n  const typeOfValue = typeOf($value)\n  if(typeOfValue === 'string') {\n    const value = $value.toLowerCase()\n    if(value === 'object') { _typedObjectLiteral = {} }\n    else if(value === 'array') { _typedObjectLiteral = [] }\n  }\n  else  {\n    if(typeOfValue === 'object') { _typedObjectLiteral = {} }\n    else if(typeOfValue === 'array') { _typedObjectLiteral = [] }\n  }\n  return _typedObjectLiteral\n}","import regularExpressions from '../regular-expressions/index.js'\nimport typedObjectLiteral from '../typed-object-literal/index.js'\nimport typeOf from '../type-of/index.js'\nimport { Cessors, Getters, Setters } from '../cessors/index.js'\nconst Options = {\n  enumerable: true, nonenumerable: false,\n  getters: [Getters.Object, Getters.Map], \n  setters: [Setters.Object],\n}\nexport default function setProperty() {\n  const $arguments = [...arguments]\n  if(typeOf($arguments[1]) === 'string') {\n    const [$target, $path, $value, $options] = $arguments\n    const options = Object.assign({}, Options, $options)\n    const getters = new Cessors(options.getters)\n    const setters = new Cessors(options.setters)\n    const { enumerable, nonenumerable } = options\n    const target = getters.cess($target)\n    const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape))\n    const key = subpaths.pop()\n    let subtarget = $target\n    iterateSubpaths: \n    for(const $subpath of subpaths) {\n      subtarget = getters.cess(subtarget, $subpath, options) || setters.cess(\n        subtarget, $subpath, isNaN($subpath) ? {} : [], options\n      )\n      if(subtarget === undefined) { break iterateSubpaths } \n    }\n    setters.cess(subtarget, key, $value)\n    return $target\n  }\n  else {\n    const [$target, $value] = $arguments\n    return $target\n  }\n}","import regularExpressions from '../regular-expressions/index.js'\nexport default function deleteProperty($target, $path) {\n  const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape))\n  const key = subpaths.pop()\n  let subtarget = $target\n  for(const $subpath of subpaths) { subtarget = subtarget[$subpath] }\n  delete subtarget[key]\n  return\n}","const Primitives = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'bigint': BigInt,\n  'undefined': undefined,\n  'null': null,\n}\nconst PrimitiveKeys = Object.keys(Primitives)\nconst PrimitiveValues = Object.values(Primitives)\nconst Objects = {\n  'object': Object,\n  'array': Array,\n  'map': Map,\n}\nconst ObjectKeys = Object.keys(Objects)\nconst ObjectValues = Object.values(Objects)\nconst Types = Object.assign({}, Primitives, Objects)\nconst TypeKeys = Object.keys(Types)\nconst TypeValues = Object.values(Types)\nconst TypeMethods = [\n Primitives.String, Primitives.Number, Primitives.Boolean, \n Objects.Object, Objects.Array\n]\nexport {\n  Primitives, PrimitiveKeys, PrimitiveValues, \n  Objects, ObjectKeys, ObjectValues,\n  Types, TypeKeys, TypeValues, TypeMethods\n}\n","import { Cessors, Getters } from '../cessors/index.js'\nimport typeOf from '../type-of/index.js'\nimport { ObjectKeys } from '../variables/index.js'\nconst Options = {\n  getters: [Getters.Object, Getters.Map],\n  ancestors: [],\n  depth: 0, maxDepth: 10,\n  enumerable: true, nonenumerable: false,\n  recurse: true,\n}\nexport default function entities($source, $type, $options) {\n  const sourceEntities = []\n  const options = Object.assign({}, Options, $options, {\n    ancestors: [].concat($options.ancestors || [])\n  })\n  const { ancestors, maxDepth, enumerable, nonenumerable, recurse } = options\n  if(options.depth >= maxDepth) { return }\n  if(!ancestors.includes($source)) { ancestors.push($source) }\n  const source = new Cessors(options.getters).cess($source)\n  options.depth++\n  for(const [$key, $propertyDescriptor] of Object.entries(\n    Object.getOwnPropertyDescriptors(source)\n  )) {\n    if(\n      enumerable && $propertyDescriptor.enumerable ||\n      nonenumerable && !$propertyDescriptor.enumerable\n    ) {\n      const $value = $propertyDescriptor.value\n      const typeOfValue = typeOf($value)\n      if(\n        recurse && \n        ObjectKeys.includes(typeOfValue) && \n        !ancestors.includes($value)\n      ) {\n        if($type === 'entries') { sourceEntities.push([$key, entities($value, $type, options)]) }\n        else if($type === 'values') { sourceEntities.push(entities($value, $type, options)) }\n        else if($type === 'keys') { sourceEntities.push($key, entities($value, $type, options)) }\n      }\n      else {\n        if($type === 'entries') { sourceEntities.push([$key, $value]) }\n        else if($type === 'values') { sourceEntities.push($value) }\n        else if($type === 'keys') { sourceEntities.push($key) }\n      }\n    }\n  }\n  return sourceEntities\n}","import { ObjectKeys } from '../variables/index.js'\nimport setProperty from '../set-property/index.js'\nimport typeOf from '../type-of/index.js'\nimport typedObjectLiteral from '../typed-object-literal/index.js'\nimport entities from '../entities/index.js'\nconst Options = { ancestors: [], nonenumerable: false }\nconst ValidPathTypes = ['string', 'function']\nexport default function expand($source, $path, $options = {}) {\n  const options = Object.assign({}, Options, $options, {\n    ancestors: [].concat($options.ancestors || []),\n  })\n  const { ancestors } = options\n  const typeOfPath = typeOf($path)\n  const typeOfSource = typeOf($source)\n  if(\n    !ValidPathTypes.includes(typeOfPath) ||\n    !ObjectKeys.includes(typeOfSource)\n  ) { return $source }\n  if(!ancestors.includes($source)) { ancestors.unshift($source) }\n  let target = typedObjectLiteral($source)\n  for(const [$sourceKey, $sourceValue] of entities(\n    $source, 'entries', Object.assign({}, options, { recurse: false })\n  )) {\n    const targetValue = (\n      ObjectKeys.includes(typeOf($sourceValue))\n    ) ? expand($sourceValue, $path) : $sourceValue\n    if(\n      typeOfPath === ValidPathTypes[0] &&\n      $sourceValue !== null &&\n      !Object.is($sourceValue, $source) && \n      !ancestors.includes($sourceValue)\n    ) {\n      target[$sourceKey] = setProperty({}, $path, targetValue, options)\n    }\n    else if(typeOfPath === ValidPathTypes[1]) {\n      target[$sourceKey] = $path(targetValue)\n    }\n  }\n  return target\n}","import entities from '../entities/index.js'\nexport default ($target, $options) => entities($target, 'entries', $options)","import getProperty from '../get-property/index.js'\nimport typeOf from '../type-of/index.js'\nimport typedObjectLiteral from '../typed-object-literal/index.js'\nimport entries from '../entries/index.js'\nconst Options = {}\nexport default function impand($source, $property, $options) {\n  const options = Object.assign({}, Options, $options)\n  const typeOfProperty = typeOf($property)\n  let target = typedObjectLiteral($source)\n  iterateSourceEntries: \n  for(const [$sourceKey, $sourceValue] of entries(\n    $source, Object.assign({}, options, { recurse: false })\n  )) {\n    if(typeOfProperty === 'string') { target[$sourceKey] = getProperty($sourceValue, $property) }\n    else if(typeOfProperty === 'function') { target[$sourceKey] = $property($sourceValue) }\n    if(target[$sourceKey] && typeof target[$sourceKey] === 'object') {\n      target[$sourceKey] = impand(target[$sourceKey], $property)\n    }\n  }\n  return target\n}","import { Cessors, Getters } from '../cessors/index.js'\nimport entities from '../entities/index.js'\nconst Options = {\n  ancestors: [],\n  depth: 0, \n  enumerable: true,\n  getters: [Getters.Object, Getters.Map],\n  maxDepth: 10,\n  nonenumerable: false, \n  values: false,\n}\nexport default function compand($source, $options) {\n  const target = []\n  const options = Object.assign({}, Options, $options, {\n    ancestors: [].concat($options.ancestors || [])\n  })\n  const { ancestors, nonenumerable, values } = options\n  options.depth++\n  if(options.depth > options.maxDepth) { return target }\n  const source = new Cessors(options.getters).cess($source)\n  if(!ancestors.includes(source)) { ancestors.unshift(source) }\n  const objectProperties = entities(source, 'entries', { nonenumerable, recurse: false })  \n  iterateObjectProperties: \n  for(const [$key, $value] of objectProperties) {\n    if(!values) { target.push($key) }\n    else if(values) { target.push([$key, $value]) }\n    if(\n      typeof $value === 'object' &&\n      $value !== null &&\n      !Object.is($value, source) && \n      !ancestors.includes($value)\n    ) {\n      const subsources = compand($value, options)\n      if(!values) {\n        for(const $subsource of subsources) {\n          const path = [$key, $subsource].join('.')\n          target.push(path)\n        }\n      }\n      else if(values) {\n        for(const [$subsourceKey, $subsource] of subsources) {\n          const path = [$key, $subsourceKey].join('.')\n          target.push([path, $subsource])\n        }\n      }\n    }\n  }\n  return target\n}","import { Cessors, Setters } from '../cessors/index.js'\nimport typeOf from '../type-of/index.js'\nimport setProperty from '../set-property/index.js'\nimport entities from '../entities/index.js'\nconst Options = {\n  setters: [Setters.Object],\n}\nexport default function decompand($source, $options) {\n  const options = Object.assign({}, Options, $options)\n  const sourceEntries = (\n    typeOf($source) === 'object'\n  ) ? entities($source, 'entries', options) : $source\n  if(!sourceEntries) { return }\n  const target = (isNaN(sourceEntries[0][0])) ? {} : []\n  iterateSourceEntries: \n  for(const [$propertyPath, $propertyValue] of sourceEntries) {\n    setProperty(target, $propertyPath, $propertyValue, options)\n  }\n  return target\n}","import typeOf from '../type-of/index.js'\nimport { ObjectKeys } from '../variables/index.js'\nexport default function assignSources($target, $type, ...$sources) {\n  if(!$target) { return $target}\n  const typeOfTarget = typeOf($target)\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    iterateSourceEntries: \n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const targetPropertyValue = $target[$sourcePropertyKey]\n      const typeOfTargetPropertyValue = typeOf(targetPropertyValue)\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue)\n      if(typeOfTarget === 'array' && $type === 'assignConcat') {\n        $target.push($sourcePropertyValue)\n      }\n      else {\n        if(ObjectKeys.includes(typeOfTargetPropertyValue)) {\n          assignSources(targetPropertyValue, $type, $sourcePropertyValue)\n        }\n        else {\n          Object.assign($target, { [$sourcePropertyKey]: $sourcePropertyValue })\n        }\n      }\n    }\n  }\n  return $target\n}","import assignSources from '../assign-sources/index.js'\nexport default ($target, ...$sources) => assignSources($target, 'assign', ...$sources)","import assignSources from '../assign-sources/index.js'\nexport default ($target, ...$sources) => assignSources($target, 'assignConcat', ...$sources)","import entities from '../entities/index.js'\nimport typeOf from '../type-of/index.js'\nconst Options = { strict: true }\nexport default function isArrayLike($source, $options) {\n  const options = Object.assign({}, Options, $options)\n  let isArrayLike\n  const typeOfSource = typeOf($source)\n  if(typeOfSource === 'array') { isArrayLike = true }\n  else if(\n    typeOfSource === 'object' &&\n    $source.length >= 0 && \n    Number.isInteger($source.length)\n  ) {\n    if(options.strict === false) {\n      isArrayLike = true\n    }\n    else {\n      iterateSourceKeys: \n      for(const $sourceKey of entities($source, 'keys', {\n        nonenumerable: true, recurse: false\n      }).reverse()) {\n        const lastIndex = Number($sourceKey)\n        if(lastIndex === $source.length - 1) {\n          isArrayLike = true\n          break iterateSourceKeys\n        }\n      }\n      if(isArrayLike === undefined) { isArrayLike = false }\n    }\n  }\n  else { isArrayLike = false }\n  return isArrayLike\n}","import isArrayLike from '../is-array-like/index.js'\nimport typeOf from '../type-of/index.js'\nimport typedObjectLiteral from '../typed-object-literal/index.js'\nimport defineProperties from '../define-properties/index.js'\nimport * as Variables from '../variables/index.js'\nconst Options = { typeCoercion: false }\nexport default function defineProperty($target, $propertyKey, $propertyDescriptor, $options) {\n  const propertyDescriptor = Object.assign({}, $propertyDescriptor)\n  let propertyDescriptorValue = propertyDescriptor.value\n  const options = Object.assign({}, Options, $options)\n  const typeOfPropertyDescriptorValue = typeOf(propertyDescriptor.value)\n  const targetPropertyValue = $target[$propertyKey]\n  const typeOfTargetPropertyValue = typeOf(targetPropertyValue)\n  if(Variables.ObjectKeys.includes(typeOfPropertyDescriptorValue)) {\n    if(Variables.ObjectKeys.includes(typeOfTargetPropertyValue)) {\n      propertyDescriptor.value = defineProperties(targetPropertyValue, propertyDescriptorValue, options)\n    }\n    else {\n      const propertyValueTarget = typedObjectLiteral(isArrayLike(\n        Object.defineProperties({}, propertyDescriptorValue)\n      ) ? 'array' : 'object')\n      propertyDescriptor.value = defineProperties(propertyValueTarget, propertyDescriptorValue, options)\n    }\n  }\n  else if(\n    options.typeCoercion && \n    Object.getOwnPropertyDescriptor(propertyDescriptor, 'type') !== undefined &&\n    !['undefined', 'null'].includes(typeOfPropertyDescriptorValue)\n  ) {\n    propertyDescriptor.value = Variables.Primitives[propertyDescriptor.type](propertyDescriptorValue)\n  }\n  Object.defineProperty($target, $propertyKey, propertyDescriptor)\n  if($propertyDescriptor.sealed) { Object.seal($target[$propertyKey]) }\n  if($propertyDescriptor.frozen) { Object.freeze($target[$propertyKey]) }\n  return $target\n}","import defineProperty from '../define-property/index.js'\nexport default function defineProperties($target, $propertyDescriptors, $options) {\n  for(const [\n    $propertyKey, $propertyDescriptor\n  ] of Object.entries($propertyDescriptors)) {\n    defineProperty($target, $propertyKey, $propertyDescriptor, $options)\n  }\n  return $target\n}","import typeOf from '../type-of/index.js'\nimport entities from '../entities/index.js'\nimport { Cessors, Getters } from '../cessors/index.js'\nimport { ObjectKeys } from '../variables/index.js'\nconst Options = {\n  ancestors: [],\n  getters: [Getters.Object, Getters.Map], \n}\nexport default function freeze($target, $options = {}) {\n  const options = Object.assign({}, Options, $options, {\n    ancestors: Object.assign([], $options.ancestors)\n  })\n  const targetEntities = entities($target, 'entries', Object.assign(options, {\n    recurse: false\n  }))\n  iterateTargetEntities: \n  for(const [$propertyKey, $propertyValue] of targetEntities) {\n    if(ObjectKeys.includes(typeOf($propertyValue)/*typeOfPropertyValue*/)) {\n      freeze($propertyValue, options)\n    }\n  }\n  return Object.freeze($target)\n}","import typeOf from '../type-of/index.js'\nimport entities from '../entities/index.js'\nimport { Cessors, Getters } from '../cessors/index.js'\nimport { ObjectKeys } from '../variables/index.js'\nconst Options = {\n  // ancestors: [],\n  // getters: [Getters.Object, Getters.Map], \n}\nexport default function seal($target, $options) {\n  const options = Object.assign({}, Options, $options, {\n    // ancestors: Object.assign([], $options.ancestors)\n  })\n  // const target = new Cessors(options.getters).cess($target, options)\n  // if(!options.ancestors.includes(target)) { options.ancestors.unshift(target) }\n  throw entities($target, 'entries', options)\n  const targetEntities = entities($target, 'entries', Object.assign(options, {\n    recurse: false\n  }))\n  iterateTargetEntities: \n  for(const [$propertyKey, $propertyValue] of targetEntries) {\n    // const typeOfPropertyValue = typeOf($propertyValue)\n    // if(options.ancestors.includes($propertyValue)) { continue iterateTargetEntities }\n    if(ObjectKeys.includes(typeOf($propertyValue)/*typeOfPropertyValue*/)) {\n      seal($propertyValue, options)\n    }\n  }\n  return Object.seal($target)\n}","import isArrayLike from '../is-array-like/index.js'\nimport typeOf from '../type-of/index.js'\nconst Options = { strict: true, isArrayLike: false }\nexport default function isEntries($source, $options) {\n  const options = Object.assign({}, Options, $options)\n  if(typeOf($source) !== 'array') {\n    if(options.isArrayLike && isArrayLike($source, {\n      strict: options.strict\n    })) { $source = Array.from($source) }\n    else { return false }\n  }\n  if(!options.strict && !$source.length) { return true }\n  else {\n    let isEntries\n    iterateSourceEntities: \n    for(const $soureEntity of $source) {\n      isEntries = (\n        typeOf($soureEntity) === 'array' &&\n        $soureEntity.length === 2 &&\n        ['string', 'number', 'symbol'].includes(typeOf($soureEntity[0]))\n      )\n      if(isEntries === false) { break iterateSourceEntities }\n    }\n    return isEntries\n  }\n}","import entities from '../entities/index.js'\nexport default ($target, $options) => entities($target, 'keys', $options)","import entities from '../entities/index.js'\nexport default ($target, $options) => entities($target, 'values', $options)","import typeOf from '../type-of/index.js'\nimport getOwnPropertyDescriptors from '../get-own-property-descriptors/index.js'\nimport { Cessors, Getters } from '../cessors/index.js'\nimport { ObjectKeys } from '../variables/index.js'\nconst Options = {\n  getters: [Getters.Object, Getters.Map],\n  ancestors: [],\n  delimiter: '.',\n  depth: 0,\n  frozen: false,\n  maxDepth: 10,\n  nonenumerable: true,\n  path: false,\n  sealed: false,\n  type: false,\n}\nexport default function getOwnPropertyDescriptor($properties, $propertyKey, $options = {}) {\n  const options = Object.assign({}, Options, $options, {\n    ancestors: Object.assign([], $options.ancestors),\n  })\n  if(options.depth >= options.maxDepth) { return }\n  else { options.depth++ }\n  const propertyValue = new Cessors(options.getters).cess($properties, $propertyKey)\n  if(propertyValue) {\n    const propertyDescriptor = Object.getOwnPropertyDescriptor($properties, $propertyKey)\n    if(!options.nonenumerable && !propertyDescriptor.enumerable) { return }\n    if(!options.ancestors.includes($properties)) { options.ancestors.unshift($properties) }\n    if(options.ancestors.includes(/*propertyValue*/propertyValue)) { return }\n    if(options.path) {\n      options.path = (\n        typeOf(options.path) === 'string'\n      ) ? [options.path, $propertyKey].join(options.delimiter) : $propertyKey\n      propertyDescriptor.path = options.path\n    }\n    if(options.type) { propertyDescriptor.type = typeOf(propertyValue) }\n    if(options.frozen) { propertyDescriptor.frozen = Object.isFrozen(propertyValue) }\n    if(options.sealed) { propertyDescriptor.sealed = Object.isSealed(propertyValue) }\n    if(ObjectKeys.includes(typeOf(propertyValue))) {\n      propertyDescriptor.value = getOwnPropertyDescriptors(propertyValue, options)\n    }\n    return propertyDescriptor\n  }\n}","import getOwnPropertyDescriptor from '../get-own-property-descriptor/index.js'\nexport default function getOwnPropertyDescriptors($target, $options) {\n  const propertyDescriptors = {}\n  for(const [$propertyKey, $propertyDescriptor] of Object.entries(Object.getOwnPropertyDescriptors($target))) {\n    const propertyDescriptor = getOwnPropertyDescriptor($target, $propertyKey, $options)\n    if(propertyDescriptor) { propertyDescriptors[$propertyKey] = propertyDescriptor }\n  }\n  return propertyDescriptors\n}","import regularExpressions from '../regular-expressions/index.js'\nconst { quotationEscape, quotationStartStop } = regularExpressions\nexport default function splitPath($path) {\n  const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape))\n  let subpathIndex = 0\n  while(subpathIndex < subpaths.length) {\n    subpaths[subpathIndex] = subpaths[subpathIndex].replace(\n      new RegExp(regularExpressions.quotationStartStop), '$1'\n    )\n    subpathIndex++\n  }\n  return subpaths\n}","import entities from '../entities/index.js' \nimport typeOf from '../type-of/index.js'\nimport typedObjectLiteral from '../typed-object-literal/index.js'\nimport { Cessors, Getters } from '../cessors/index.js'\nimport { ObjectKeys } from '../variables/index.js'\nconst Options = {\n  ancestors: [],\n  getters: [Getters.Object, Getters.Map], \n}\nexport default function valueOf($source, $options = {}) {\n  const options = Object.assign({}, Options, $options, {\n    ancestors: Object.assign([], $options.ancestors)\n  })\n  const source = new Cessors(options.getters).cess($source, options)\n  if(source === undefined) { throw [$source, source] }\n  if(!options.ancestors.includes($source)) { options.ancestors.unshift($source) }\n  const target = typedObjectLiteral(typeOf(source))\n  const sourceEntries = entities($source, 'entries', Object.assign(options, { recurse: false }))\n  iterateSourceEntries: \n  for(const [$sourceKey, $sourceValue] of sourceEntries) {\n    let sourceValue\n    if(ObjectKeys.includes(typeOf($sourceValue))) {\n      sourceValue = valueOf($sourceValue, options)\n    }\n    else { sourceValue = $sourceValue }\n    if(options.ancestors.includes(sourceValue)) { continue iterateSourceEntries }\n    try {\n      target[$sourceKey] = sourceValue\n    }\n    catch($err) { console.error($err) }\n  }\n  return target\n}","import valueOf from '../value-of/index.js'\nimport { Getters } from '../cessors/index.js'\nimport { ObjectKeys } from '../variables/index.js'\nconst Options = {\n  getters: [Getters.Object, Getters.Map], space: 0, replacer: null\n}\nexport default function toString($source, $options) {\n  const options = Object.assign({}, Options, $options)\n  return JSON.stringify(\n    valueOf($source, options), options.replacer, options.space\n  )\n}","import getProperty from './get-property/index.js'\nimport setProperty from './set-property/index.js'\nimport deleteProperty from './delete-property/index.js'\nimport * as cessors from './cessors/index.js'\nimport expand from './expand/index.js'\nimport impand from './impand/index.js'\nimport compand from './compand/index.js'\nimport decompand from './decompand/index.js'\nimport assign from './assign/index.js'\nimport assignConcat from './assign-concat/index.js'\nimport defineProperties from './define-properties/index.js'\nimport defineProperty from './define-property/index.js'\nimport freeze from './freeze/index.js'\nimport seal from './seal/index.js'\nimport regularExpressions from './regular-expressions/index.js'\nimport typedObjectLiteral from './typed-object-literal/index.js'\nimport typeOf from './type-of/index.js'\nimport isArrayLike from './is-array-like/index.js'\nimport isEntries from './is-entries/index.js'\nimport * as variables from './variables/index.js'\nimport keys from './keys/index.js'\nimport values from './values/index.js'\nimport entries from './entries/index.js'\nimport entities from './entities/index.js'\nimport getOwnPropertyDescriptors from './get-own-property-descriptors/index.js'\nimport getOwnPropertyDescriptor from './get-own-property-descriptor/index.js'\nimport splitPath from './split-path/index.js'\nimport toString from './to-string/index.js'\nimport valueOf from './value-of/index.js'\n\nclass Recourse extends EventTarget {\n  static compand = compand\n  static decompand = decompand\n  static expand = expand\n  static impand = impand\n  static keys = keys\n  static values = values\n  static entries = entries\n  static entities = entities\n  static get = getProperty\n  static set = setProperty\n  static delete = deleteProperty\n  static assign = assign\n  static assignConcat = assignConcat\n  static defineProperties = defineProperties\n  static defineProperty = defineProperty\n  static freeze = freeze\n  static seal = seal\n  static getOwnPropertyDescriptors = getOwnPropertyDescriptors\n  static getOwnPropertyDescriptor = getOwnPropertyDescriptor\n  static isArrayLike = isArrayLike\n  static isEntries = isEntries\n  static typeOf = typeOf\n  static toString = toString\n  static valueOf = valueOf\n\n  constructor($target) {\n    super()\n    iterateStaticMutatorMethods: \n    for(const [$staticMethodName, $staticMethod] of Object.entries({\n      compand: Recourse.compand, decompand: Recourse.decompand, \n      expand: Recourse.expand, impand: Recourse.impand,\n      entities: Recourse.entities,\n      keys: Recourse.keys, values: Recourse.values, entries: Recourse.entries, \n      get: Recourse.get, set: Recourse.set, delete: Recourse.delete,\n      assign: Recourse.assign, assignConcat: Recourse.assignConcat, \n      defineProperties: Recourse.defineProperties, defineProperty: Recourse.defineProperty,\n      freeze: Recourse.freeze, seal: Recourse.seal,\n      getOwnPropertyDescriptors: Recourse.getOwnPropertyDescriptors, getOwnPropertyDescriptor: Recourse.getOwnPropertyDescriptor,\n      isArrayLike: Recourse.isArrayLike, isEntries: Recourse.isEntries, typeOf: Recourse.typeOf,\n    })) {\n      Object.defineProperty(this, $staticMethodName, {\n        value: $staticMethod.bind(this, $target)\n      })\n    }\n  }\n}\nexport {\n  Recourse, cessors, \n  getProperty as get, setProperty as set, deleteProperty as delete,\n  expand, impand, compand, decompand,\n  assign, assignConcat,\n  defineProperties, defineProperty,\n  freeze, seal,\n  keys, values, entries,\n  entities, \n  getOwnPropertyDescriptors, getOwnPropertyDescriptor,\n  isArrayLike, isEntries, typeOf,\n  splitPath, \n  typedObjectLiteral, regularExpressions, variables,\n  valueOf, toString,\n}"],"names":["regularExpressions","quotationEscape","quotationStartStop","typeOf","$operand","Object","prototype","toString","call","slice","toLowerCase","Cessors","EventTarget","constructor","$cessors","super","cessors","assign","defineProperties","this","cess","value","iterateGetters","$cessor","arguments","undefined","Getters","$target","includes","Map","$property","get","fromEntries","Setters","$arguments","$value","$options","$source","$targetKey","keys","$sourceKey","$sourceValue","entries","source","set","clear","Deleters","delete","Options","getters","getProperty","$path","options","subpaths","split","RegExp","subtarget","iterateSubpaths","$subpath","$err","typedObjectLiteral","_typedObjectLiteral","typeOfValue","enumerable","nonenumerable","setters","setProperty","key","pop","isNaN","deleteProperty","Primitives","string","String","number","Number","boolean","Boolean","bigint","BigInt","null","PrimitiveKeys","PrimitiveValues","values","Objects","object","array","Array","map","ObjectKeys","ObjectValues","Types","TypeKeys","TypeValues","TypeMethods","ancestors","depth","maxDepth","recurse","entities","$type","sourceEntities","concat","push","$key","$propertyDescriptor","getOwnPropertyDescriptors","ValidPathTypes","expand","typeOfPath","typeOfSource","unshift","target","targetValue","is","impand","typeOfProperty","compand","objectProperties","subsources","$subsourceKey","$subsource","path","join","decompand","sourceEntries","$propertyPath","$propertyValue","assignSources","$sources","typeOfTarget","$sourcePropertyKey","$sourcePropertyValue","targetPropertyValue","typeOfTargetPropertyValue","assignConcat","strict","isArrayLike","length","isInteger","iterateSourceKeys","reverse","typeCoercion","defineProperty","$propertyKey","propertyDescriptor","propertyDescriptorValue","typeOfPropertyDescriptorValue","Variables.ObjectKeys","propertyValueTarget","getOwnPropertyDescriptor","Variables.Primitives","type","sealed","seal","frozen","freeze","$propertyDescriptors","targetEntities","isEntries","from","iterateSourceEntities","$soureEntity","delimiter","$properties","propertyValue","isFrozen","isSealed","propertyDescriptors","splitPath","subpathIndex","replace","valueOf","sourceValue","console","error","space","replacer","JSON","stringify","Recourse","static","$staticMethodName","$staticMethod","bind"],"mappings":"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"}