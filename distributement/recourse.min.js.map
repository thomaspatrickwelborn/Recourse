{"version":3,"file":"recourse.min.js","sources":["../development/variables/index.js","../development/regular-expressions/index.js","../development/type-of/index.js","../development/path/index.js","../development/typed-object-literal/index.js","../development/tree/index.js","../development/expand-tree/index.js","../development/impand-tree/index.js","../development/is-array-like/index.js","../development/property-directory/index.js","../development/accessors/index.js","../development/recursive-assign/index.js","../development/recursive-assign-concat/index.js","../development/recursive-get-own-property-descriptors/options.js","../development/recursive-get-own-property-descriptor/index.js","../development/recursive-get-own-property-descriptors/index.js","../development/recursive-define-properties/options.js","../development/recursive-define-property/index.js","../development/recursive-define-properties/index.js","../development/recursive-freeze/index.js"],"sourcesContent":["const Primitives = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'bigint': BigInt,\n  'undefined': undefined,\n  'null': null,\n}\nconst PrimitiveKeys = Object.keys(Primitives)\nconst PrimitiveValues = Object.values(Primitives)\nconst Objects = {\n  'object': Object,\n  'array': Array,\n}\nconst ObjectKeys = Object.keys(Objects)\nconst ObjectValues = Object.values(Objects)\nconst Types = Object.assign({}, Primitives, Objects)\nconst TypeKeys = Object.keys(Types)\nconst TypeValues = Object.values(Types)\nconst TypeMethods = [\n Primitives.String, Primitives.Number, Primitives.Boolean, \n Objects.Object, Objects.Array\n]\nexport {\n  Primitives, PrimitiveKeys, PrimitiveValues, \n  Objects, ObjectKeys, ObjectValues,\n  Types, TypeKeys, TypeValues, TypeMethods\n}\n","export default {\n  quotationEscape: /\\.(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,\n}","export default ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase()","import regularExpressions from '../regular-expressions/index.js'\nimport typeOf from '../type-of/index.js'\nfunction subpaths($path) {\n  return $path.split(\n    new RegExp(regularExpressions.quotationEscape)\n  )\n}\nfunction keypaths($path) {\n  const _subpaths = subpaths($path)\n  _subpaths.pop()\n  return _subpaths\n}\nfunction key($path) { return subpaths($path).pop() }\nfunction root($path) { return subpaths($path).shift() }\nfunction typeofRoot($path) { return (\n  Number(root($path))\n) ? 'array' : 'object' }\nfunction parse($path) {\n  return {\n    subpaths: subpaths($path),\n    keypaths: keypaths($path),\n    key: key($path),\n    root: root($path),\n    typeofRoot: typeofRoot($path),\n  }\n}\nexport {\n  subpaths,\n  keypaths,\n  key,\n  root,\n  typeofRoot,\n  parse,\n}","import typeOf from '../type-of/index.js'\nexport default function typedObjectLiteral($value) {\n  let _typedObjectLiteral\n  const typeOfValue = typeOf($value)\n  if(typeOfValue === 'string') {\n    const value = $value.toLowerCase()\n    if(value === 'object') { _typedObjectLiteral = {} }\n    else if(value === 'array') { _typedObjectLiteral = [] }\n  }\n  else  {\n    if(typeOfValue === 'object') { _typedObjectLiteral = {} }\n    else if(typeOfValue === 'array') { _typedObjectLiteral = [] }\n  }\n  return _typedObjectLiteral\n}","import * as path from '../path/index.js'\nimport typedObjectLiteral from '../typed-object-literal/index.js'\nimport regularExpressions from '../regular-expressions/index.js'\nfunction get($path, $source) {\n  const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape))\n  const key = subpaths.pop()\n  let subtarget = $source\n  for(const $subpath of subpaths) { subtarget = subtarget[$subpath] }\n  return subtarget[key]\n}\nfunction set($path, $source) {\n  const {\n    keypaths, key, typeofRoot\n  } = path.parse($path)\n  const target = typedObjectLiteral(typeofRoot)\n  let subtarget = target\n  for(const $subpath of keypaths) {\n    if(Number($subpath)) { subtarget[$subpath] = [] }\n    else { subtarget[$subpath] = {} }\n    subtarget = subtarget[$subpath]\n  }\n  subtarget[key] = $source\n  return target\n}\nexport { get, set }","import { ObjectKeys } from '../variables/index.js'\nimport * as Tree from '../tree/index.js'\nimport typeOf from '../type-of/index.js'\nimport typedObjectLiteral from '../typed-object-literal/index.js'\nconst ValidPropertyTypes = ['string', 'function']\nexport default function expandTree($source, $property) {\n  const typeOfProperty = typeOf($property)\n  const typeOfSource = typeOf($source)\n  if(\n    !ValidPropertyTypes.includes(typeOfProperty) ||\n    !ObjectKeys.includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral($source)\n  iterateSourceEntries: \n  for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n    const sourceValue = (\n      ObjectKeys.includes(typeOf($sourceValue))\n    ) ? expandTree($sourceValue, $property) : $sourceValue\n    if(typeOfProperty === ValidPropertyTypes[0]) {\n      target[$sourceKey] = Tree.set($property, sourceValue)\n    }\n    else if(typeOfProperty === ValidPropertyTypes[1]) {\n      target[$sourceKey] = $property(sourceValue)\n    }\n  }\n  return target\n}","import * as Variables from '../variables/index.js'\nimport * as Path from '../path/index.js'\nimport * as Tree from '../tree/index.js'\nimport typeOf from '../type-of/index.js'\nimport typedObjectLiteral from '../typed-object-literal/index.js'\nexport default function impandTree($source, $property) {\n  const typeOfProperty = typeOf($property)\n  const typeOfSource = typeOf($source)\n  if(\n    !['string', 'function'].includes(typeOfProperty) ||\n    !['array', 'object'].includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral($source)\n  iterateSourceEntries: \n  for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n    if(typeOfProperty === 'string') { target[$sourceKey] = Tree.get($property, $sourceValue) }\n    else if(typeOfProperty === 'function') { target[$sourceKey] = $property($sourceValue) }\n    if(target[$sourceKey] && typeof target[$sourceKey] === 'object') {\n      target[$sourceKey] = impandTree(target[$sourceKey], $property)\n    }\n  }\n  return target\n}","import typeOf from '../type-of/index.js'\nexport default ($source) => {\n  let isArrayLike\n  const typeOfSource = typeOf($source)\n  if(typeOfSource === 'array') { isArrayLike = true }\n  else if(\n    typeOfSource === 'object' &&\n    Number.isInteger($source.length) && $source.length >= 0\n  ) {\n    iterateSourceKeys: \n    for(const $sourceKey of Object.keys(\n      Object.getOwnPropertyDescriptors($source)\n    )) {\n      if($sourceKey === 'length') { continue iterateSourceKeys }\n      isArrayLike = !isNaN($sourceKey)\n      if(!isArrayLike) { break iterateSourceKeys }\n    }\n  }\n  else { isArrayLike = false }\n  return isArrayLike\n}","import Accessors from '../accessors/index.js'\nconst Options = {\n  depth: 0,\n  maxDepth: 10,\n  accessors: [Accessors.default],\n}\nexport default function propertyDirectory($object, $options) {\n  const _propertyDirectory = []\n  const options = Object.assign({}, Options, $options)\n  options.depth++\n  if(options.depth > options.maxDepth) { return _propertyDirectory }\n  iterateAccessors: \n  for(const $accessor of options.accessors) {\n    const accessor = $accessor.bind($object)\n    const object = accessor($object)\n    if(!object) continue iterateAccessors\n    iterateObjectProperties: \n    for(const [$key, $value] of Object.entries(object)) {\n      if(!options.values) { _propertyDirectory.push($key) }\n      else if(options.values) { _propertyDirectory.push([$key, $value]) }\n      if(\n        typeof $value === 'object' &&\n        $value !== null &&\n        $value !== object\n      ) {\n        const subtargets = propertyDirectory($value, options)\n        if(!options.values) {\n          for(const $subtarget of subtargets) {\n            const path = [$key, $subtarget].join('.')\n            _propertyDirectory.push(path)\n          }\n        }\n        else if(options.values) {\n          for(const [$subtargetKey, $subtarget] of subtargets) {\n            const path = [$key, $subtargetKey].join('.')\n            _propertyDirectory.push([path, $subtarget])\n          }\n        }\n      }\n    }\n  }\n  return _propertyDirectory\n}","const defaultAccessor = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target[$property] }\n}\nconst getAccessor = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target.get($property) }\n}\nexport default {\n  default: defaultAccessor,\n  get: getAccessor,\n}","import typeOf from '../type-of/index.js'\nexport default function recursiveAssign($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    iterateSourceEntries: \n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey])\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue)\n      if(\n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = recursiveAssign($target[$sourcePropertyKey], $sourcePropertyValue)\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue\n      }\n    }\n  }\n  return $target\n}","import typeOf from '../type-of/index.js'\nexport default function recursiveAssignConcat($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    iterateSourceEntries: \n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey])\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue)\n      if( \n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = recursiveAssignConcat($target[$sourcePropertyKey], $sourcePropertyValue)\n      }\n      else if(\n        typeOfTargetPropertyValue === 'array' &&\n        typeOfSourcePropertyValue === 'array'\n      ) {\n        $target[$sourcePropertyKey] = $target[$sourcePropertyKey].concat($sourcePropertyValue)\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue\n      }\n    }\n  }\n  return $target\n}","export default { type: false }\n","import typeOf from '../type-of/index.js'\nimport typedObjectLiteral from '../typed-object-literal/index.js'\nimport recursiveGetOwnPropertyDescriptors from '../recursive-get-own-property-descriptors/index.js'\nimport Options from '../recursive-get-own-property-descriptors/options.js'\nexport default function recursiveGetOwnPropertyDescriptor($properties, $propertyKey, $options) {\n  const options = Object.assign({}, Options, $options)\n  const propertyDescriptor = Object.getOwnPropertyDescriptor($properties, $propertyKey)\n  if(options.type) { propertyDescriptor.type = typeOf(propertyDescriptor.value) }\n  if(['array', 'object'].includes(typeOf(propertyDescriptor.value))) {\n    propertyDescriptor.value = recursiveGetOwnPropertyDescriptors(propertyDescriptor.value)\n  }\n  return propertyDescriptor\n}","import recursiveGetOwnPropertyDescriptor from '../recursive-get-own-property-descriptor/index.js'\nimport Options from './options.js'\nexport default function recursiveGetOwnPropertyDescriptors($properties, $options) {\n  const options = Object.assign({}, Options, $options)\n  const propertyDescriptors = {}\n  for(const $propertyKey of Object.keys(Object.getOwnPropertyDescriptors($properties))) {\n    propertyDescriptors[$propertyKey] = recursiveGetOwnPropertyDescriptor($properties, $propertyKey, options)\n  }\n  return propertyDescriptors\n}","export default { typeCoercion: false }","import isArrayLike from '../is-array-like/index.js'\nimport typeOf from '../type-of/index.js'\nimport typedObjectLiteral from '../typed-object-literal/index.js'\nimport recursiveDefineProperties from '../recursive-define-properties/index.js'\nimport * as Variables from '../variables/index.js'\nimport Options from '../recursive-define-properties/options.js'\nexport default function recursiveDefineProperty($target, $propertyKey, $propertyDescriptor, $options) {\n  const options = Object.assign({}, Options, $options)\n  const typeOfPropertyValue = typeOf($propertyDescriptor.value)\n  if(['array', 'object'].includes(typeOfPropertyValue)) {\n    const propertyValue = isArrayLike(Object.defineProperties(\n      typedObjectLiteral(typeOfPropertyValue), $propertyDescriptor.value\n    )) ? [] : {}\n    $propertyDescriptor.value = recursiveDefineProperties(propertyValue, $propertyDescriptor.value)\n  }\n  else if(\n    options.typeCoercion && \n    Object.getOwnPropertyDescriptor($propertyDescriptor, 'type') !== undefined &&\n    !['undefined', 'null'].includes(typeOfPropertyValue)\n  ) {\n    $propertyDescriptor.value = Variables.Primitives[$propertyDescriptor.type](value)\n  }\n  Object.defineProperty($target, $propertyKey, $propertyDescriptor)\n  return $target\n}","import recursiveDefineProperty from '../recursive-define-property/index.js'\nimport Options from './options.js'\nexport default function recursiveDefineProperties($target, $propertyDescriptors, $options) {\n  const options = Object.assign({}, Options, $options)\n  for(const [\n    $propertyKey, $propertyDescriptor\n  ] of Object.entries($propertyDescriptors)) {\n    recursiveDefineProperty($target, $propertyKey, $propertyDescriptor)\n  }\n  return $target\n}","function recursiveFreeze($target) {\n  for(const [$propertyKey, $propertyValue] of Object.entries($target)) {\n    if($propertyValue && typeof $propertyValue === 'object') {\n      recursiveFreeze($propertyValue)\n    }\n  }\n  return Object.freeze($target)\n}\nexport default recursiveFreeze"],"names":["Primitives","string","String","number","Number","boolean","Boolean","bigint","BigInt","undefined","null","PrimitiveKeys","Object","keys","PrimitiveValues","values","Objects","object","array","Array","ObjectKeys","ObjectValues","Types","assign","TypeKeys","TypeValues","TypeMethods","regularExpressions","quotationEscape","typeOf","$data","prototype","toString","call","slice","toLowerCase","subpaths","$path","split","RegExp","keypaths","_subpaths","pop","key","root","shift","typeofRoot","parse","typedObjectLiteral","$value","_typedObjectLiteral","typeOfValue","value","get","$source","subtarget","$subpath","set","path.parse","target","ValidPropertyTypes","expandTree","$property","typeOfProperty","typeOfSource","includes","$sourceKey","$sourceValue","entries","sourceValue","Tree.set","impandTree","Tree.get","isArrayLike","isInteger","length","iterateSourceKeys","getOwnPropertyDescriptors","isNaN","Options","depth","maxDepth","accessors","default","$target","propertyDirectory","$object","$options","_propertyDirectory","options","$accessor","bind","accessor","$key","push","subtargets","$subtargetKey","$subtarget","path","join","recursiveAssign","$sources","$sourcePropertyKey","$sourcePropertyValue","typeOfTargetPropertyValue","typeOfSourcePropertyValue","recursiveAssignConcat","concat","Options$1","type","recursiveGetOwnPropertyDescriptor","$properties","$propertyKey","propertyDescriptor","getOwnPropertyDescriptor","recursiveGetOwnPropertyDescriptors","propertyDescriptors","typeCoercion","recursiveDefineProperty","$propertyDescriptor","typeOfPropertyValue","propertyValue","defineProperties","recursiveDefineProperties","Variables.Primitives","defineProperty","$propertyDescriptors","recursiveFreeze","$propertyValue","freeze"],"mappings":"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"}