{"version":3,"file":"recourse.min.js","sources":["../development/variables/index.js","../development/type-of/index.js","../development/typed-object-literal/index.js","../development/regular-expressions/index.js","../development/tree/index.js","../development/expand-tree/index.js","../development/impand-tree/index.js","../development/is-array-like/index.js","../development/property-directory/index.js","../development/accessors/index.js","../development/recursive-assign/index.js","../development/recursive-assign-concat/index.js","../development/recursive-get-own-property-descriptors/options.js","../development/recursive-get-own-property-descriptor/index.js","../development/recursive-get-own-property-descriptors/index.js","../development/recursive-define-properties/options.js","../development/recursive-define-property/index.js","../development/recursive-define-properties/index.js","../development/recursive-freeze/index.js"],"sourcesContent":["const Primitives = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'bigint': BigInt,\n  'undefined': undefined,\n  'null': null,\n}\nconst PrimitiveKeys = Object.keys(Primitives)\nconst PrimitiveValues = Object.values(Primitives)\nconst Objects = {\n  'object': Object,\n  'array': Array,\n}\nconst ObjectKeys = Object.keys(Objects)\nconst ObjectValues = Object.values(Objects)\nconst Types = Object.assign({}, Primitives, Objects)\nconst TypeKeys = Object.keys(Types)\nconst TypeValues = Object.values(Types)\nconst TypeMethods = [\n Primitives.String, Primitives.Number, Primitives.Boolean, \n Objects.Object, Objects.Array\n]\nexport {\n  Primitives, PrimitiveKeys, PrimitiveValues, \n  Objects, ObjectKeys, ObjectValues,\n  Types, TypeKeys, TypeValues, TypeMethods\n}\n","export default ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase()","import typeOf from '../type-of/index.js'\nexport default function typedObjectLiteral($value) {\n  let _typedObjectLiteral\n  const typeOfValue = typeOf($value)\n  if(typeOfValue === 'string') {\n    const value = $value.toLowerCase()\n    if(value === 'object') { _typedObjectLiteral = {} }\n    else if(value === 'array') { _typedObjectLiteral = [] }\n  }\n  else  {\n    if(typeOfValue === 'object') { _typedObjectLiteral = {} }\n    else if(typeOfValue === 'array') { _typedObjectLiteral = [] }\n  }\n  return _typedObjectLiteral\n}","export default {\n  quotationEscape: /\\.(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,\n}","import typedObjectLiteral from '../typed-object-literal/index.js'\nimport regularExpressions from '../regular-expressions/index.js'\nfunction get($path, $source) {\n  const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape))\n  const key = subpaths.pop()\n  let subtarget = $source\n  for(const $subpath of subpaths) { subtarget = subtarget[$subpath] }\n  return subtarget[key]\n}\nfunction set($path, $source) {\n  const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape))\n  const key = subpaths.pop()\n  const target = (key && !isNaN(key)) ? [] : {}\n  let subtarget = target\n  let subpathIndex = 0\n  while(subpathIndex < subpaths.length - 2) {\n    const $subpath = keypaths[subpathIndex]\n    if(isNaN($subpath)) { subtarget[$subpath] = {} }\n    else { subtarget[$subpath] = {} }\n    subtarget = subtarget[$subpath]\n    subpathIndex++\n  }\n  subtarget[key] = $source\n  return target\n}\nexport { get, set }","import { ObjectKeys } from '../variables/index.js'\nimport * as Tree from '../tree/index.js'\nimport typeOf from '../type-of/index.js'\nimport typedObjectLiteral from '../typed-object-literal/index.js'\nconst ValidPropertyTypes = ['string', 'function']\nexport default function expandTree($source, $property) {\n  const typeOfProperty = typeOf($property)\n  const typeOfSource = typeOf($source)\n  if(\n    !ValidPropertyTypes.includes(typeOfProperty) ||\n    !ObjectKeys.includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral($source)\n  iterateSourceEntries: \n  for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n    const sourceValue = (\n      ObjectKeys.includes(typeOf($sourceValue))\n    ) ? expandTree($sourceValue, $property) : $sourceValue\n    if(typeOfProperty === ValidPropertyTypes[0]) {\n      target[$sourceKey] = Tree.set($property, sourceValue)\n    }\n    else if(typeOfProperty === ValidPropertyTypes[1]) {\n      target[$sourceKey] = $property(sourceValue)\n    }\n  }\n  return target\n}","import * as Variables from '../variables/index.js'\n// import * as PropertyPath from '../property-path/index.js'\nimport * as Tree from '../tree/index.js'\nimport typeOf from '../type-of/index.js'\nimport typedObjectLiteral from '../typed-object-literal/index.js'\nexport default function impandTree($source, $property) {\n  const typeOfProperty = typeOf($property)\n  const typeOfSource = typeOf($source)\n  if(\n    !['string', 'function'].includes(typeOfProperty) ||\n    !['array', 'object'].includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral($source)\n  iterateSourceEntries: \n  for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n    if(typeOfProperty === 'string') { target[$sourceKey] = Tree.get($property, $sourceValue) }\n    else if(typeOfProperty === 'function') { target[$sourceKey] = $property($sourceValue) }\n    if(target[$sourceKey] && typeof target[$sourceKey] === 'object') {\n      target[$sourceKey] = impandTree(target[$sourceKey], $property)\n    }\n  }\n  return target\n}","import typeOf from '../type-of/index.js'\nexport default ($source) => {\n  let isArrayLike\n  const typeOfSource = typeOf($source)\n  if(typeOfSource === 'array') { isArrayLike = true }\n  else if(\n    typeOfSource === 'object' &&\n    Number.isInteger($source.length) && $source.length >= 0\n  ) {\n    iterateSourceKeys: \n    for(const $sourceKey of Object.keys(\n      Object.getOwnPropertyDescriptors($source)\n    )) {\n      if($sourceKey === 'length') { continue iterateSourceKeys }\n      isArrayLike = !isNaN($sourceKey)\n      if(!isArrayLike) { break iterateSourceKeys }\n    }\n  }\n  else { isArrayLike = false }\n  return isArrayLike\n}","import Accessors from '../accessors/index.js'\nconst Options = {\n  depth: 0,\n  maxDepth: 10,\n  accessors: [Accessors.default],\n}\nexport default function propertyDirectory($object, $options) {\n  const _propertyDirectory = []\n  const options = Object.assign({}, Options, $options)\n  options.depth++\n  if(options.depth > options.maxDepth) { return _propertyDirectory }\n  iterateAccessors: \n  for(const $accessor of options.accessors) {\n    const accessor = $accessor.bind($object)\n    const object = accessor($object)\n    if(!object) continue iterateAccessors\n    iterateObjectProperties: \n    for(const [$key, $value] of Object.entries(object)) {\n      if(!options.values) { _propertyDirectory.push($key) }\n      else if(options.values) { _propertyDirectory.push([$key, $value]) }\n      if(\n        typeof $value === 'object' &&\n        $value !== null &&\n        $value !== object\n      ) {\n        const subtargets = propertyDirectory($value, options)\n        if(!options.values) {\n          for(const $subtarget of subtargets) {\n            const path = [$key, $subtarget].join('.')\n            _propertyDirectory.push(path)\n          }\n        }\n        else if(options.values) {\n          for(const [$subtargetKey, $subtarget] of subtargets) {\n            const path = [$key, $subtargetKey].join('.')\n            _propertyDirectory.push([path, $subtarget])\n          }\n        }\n      }\n    }\n  }\n  return _propertyDirectory\n}","const defaultAccessor = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target[$property] }\n}\nconst getAccessor = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target.get($property) }\n}\nexport default {\n  default: defaultAccessor,\n  get: getAccessor,\n}","import typeOf from '../type-of/index.js'\nexport default function recursiveAssign($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    iterateSourceEntries: \n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey])\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue)\n      if(\n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = recursiveAssign($target[$sourcePropertyKey], $sourcePropertyValue)\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue\n      }\n    }\n  }\n  return $target\n}","import typeOf from '../type-of/index.js'\nexport default function recursiveAssignConcat($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    iterateSourceEntries: \n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey])\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue)\n      if( \n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = recursiveAssignConcat($target[$sourcePropertyKey], $sourcePropertyValue)\n      }\n      else if(\n        typeOfTargetPropertyValue === 'array' &&\n        typeOfSourcePropertyValue === 'array'\n      ) {\n        $target[$sourcePropertyKey] = $target[$sourcePropertyKey].concat($sourcePropertyValue)\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue\n      }\n    }\n  }\n  return $target\n}","export default {\n  parent: false,\n  path: false,\n  type: false,\n}\n","import typeOf from '../type-of/index.js'\nimport typedObjectLiteral from '../typed-object-literal/index.js'\nimport recursiveGetOwnPropertyDescriptors from '../recursive-get-own-property-descriptors/index.js'\nimport Options from '../recursive-get-own-property-descriptors/options.js'\nexport default function recursiveGetOwnPropertyDescriptor($properties, $propertyKey, $options) {\n  const options = Object.assign({}, Options, $options)\n  const propertyDescriptor = Object.getOwnPropertyDescriptor($properties, $propertyKey)\n  if(options.type) { propertyDescriptor.type = typeOf(propertyDescriptor.value) }\n  if(['array', 'object'].includes(typeOf(propertyDescriptor.value))) {\n    propertyDescriptor.value = recursiveGetOwnPropertyDescriptors(propertyDescriptor.value, options)\n  }\n  return propertyDescriptor\n}","import recursiveGetOwnPropertyDescriptor from '../recursive-get-own-property-descriptor/index.js'\nimport Options from './options.js'\nexport default function recursiveGetOwnPropertyDescriptors($properties, $options) {\n  const options = Object.assign({}, Options, $options)\n  const propertyDescriptors = {}\n  for(const $propertyKey of Object.keys(Object.getOwnPropertyDescriptors($properties))) {\n    propertyDescriptors[$propertyKey] = recursiveGetOwnPropertyDescriptor($properties, $propertyKey, options)\n  }\n  return propertyDescriptors\n}","export default { typeCoercion: false }","import isArrayLike from '../is-array-like/index.js'\nimport typeOf from '../type-of/index.js'\nimport typedObjectLiteral from '../typed-object-literal/index.js'\nimport recursiveDefineProperties from '../recursive-define-properties/index.js'\nimport * as Variables from '../variables/index.js'\nimport Options from '../recursive-define-properties/options.js'\nexport default function recursiveDefineProperty($target, $propertyKey, $propertyDescriptor, $options) {\n  const propertyDescriptor = Object.assign({}, $propertyDescriptor)\n  const options = Object.assign({}, Options, $options)\n  const typeOfPropertyValue = typeOf(propertyDescriptor.value)\n  if(['array', 'object'].includes(typeOfPropertyValue)) {\n    const propertyValue = isArrayLike(Object.defineProperties(\n      typedObjectLiteral(typeOfPropertyValue), propertyDescriptor.value\n    )) ? [] : {}\n    propertyDescriptor.value = recursiveDefineProperties(propertyValue, propertyDescriptor.value, options)\n  }\n  else if(\n    options.typeCoercion && \n    Object.getOwnPropertyDescriptor(propertyDescriptor, 'type') !== undefined &&\n    !['undefined', 'null'].includes(typeOfPropertyValue)\n  ) {\n    propertyDescriptor.value = Variables.Primitives[propertyDescriptor.type](propertyDescriptor.value)\n  }\n  Object.defineProperty($target, $propertyKey, propertyDescriptor)\n  return $target\n}","import recursiveDefineProperty from '../recursive-define-property/index.js'\nimport Options from './options.js'\nexport default function recursiveDefineProperties($target, $propertyDescriptors, $options) {\n  const options = Object.assign({}, Options, $options)\n  for(const [\n    $propertyKey, $propertyDescriptor\n  ] of Object.entries($propertyDescriptors)) {\n    recursiveDefineProperty($target, $propertyKey, $propertyDescriptor, options)\n  }\n  return $target\n}","function recursiveFreeze($target) {\n  for(const [$propertyKey, $propertyValue] of Object.entries($target)) {\n    if($propertyValue && typeof $propertyValue === 'object') {\n      recursiveFreeze($propertyValue)\n    }\n  }\n  return Object.freeze($target)\n}\nexport default recursiveFreeze"],"names":["Primitives","string","String","number","Number","boolean","Boolean","bigint","BigInt","undefined","null","PrimitiveKeys","Object","keys","PrimitiveValues","values","Objects","object","array","Array","ObjectKeys","ObjectValues","Types","assign","TypeKeys","TypeValues","TypeMethods","typeOf","$data","prototype","toString","call","slice","toLowerCase","typedObjectLiteral","$value","_typedObjectLiteral","typeOfValue","value","regularExpressions","quotationEscape","get","$path","$source","subpaths","split","RegExp","key","pop","subtarget","$subpath","set","target","isNaN","subpathIndex","length","keypaths","ValidPropertyTypes","expandTree","$property","typeOfProperty","typeOfSource","includes","$sourceKey","$sourceValue","entries","sourceValue","Tree.set","impandTree","Tree.get","isArrayLike","isInteger","iterateSourceKeys","getOwnPropertyDescriptors","Options","depth","maxDepth","accessors","default","$target","propertyDirectory","$object","$options","_propertyDirectory","options","$accessor","bind","accessor","$key","push","subtargets","$subtargetKey","$subtarget","path","join","recursiveAssign","$sources","$sourcePropertyKey","$sourcePropertyValue","typeOfTargetPropertyValue","typeOfSourcePropertyValue","recursiveAssignConcat","concat","Options$1","parent","type","recursiveGetOwnPropertyDescriptor","$properties","$propertyKey","propertyDescriptor","getOwnPropertyDescriptor","recursiveGetOwnPropertyDescriptors","propertyDescriptors","typeCoercion","recursiveDefineProperty","$propertyDescriptor","typeOfPropertyValue","propertyValue","defineProperties","recursiveDefineProperties","Variables.Primitives","defineProperty","$propertyDescriptors","recursiveFreeze","$propertyValue","freeze"],"mappings":"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"}